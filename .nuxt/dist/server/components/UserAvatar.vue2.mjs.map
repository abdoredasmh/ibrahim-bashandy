{"version":3,"file":"UserAvatar.vue2.mjs","sources":["../../../../components/UserAvatar.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"flex items-center justify-center rounded-full overflow-hidden flex-shrink-0\"\r\n    :class=\"sizeClasses\"\r\n  >\r\n    <img\r\n      v-if=\"avatarUrl && !showInitial\"\r\n      :src=\"avatarUrl\"\r\n      :alt=\"altText\"\r\n      class=\"w-full h-full object-cover\"\r\n      loading=\"lazy\"\r\n      @error=\"handleImageError\"\r\n    />\r\n    <div\r\n      v-else-if=\"initial\"\r\n      :class=\"[\r\n        'w-full h-full flex items-center justify-center font-semibold',\r\n        initialBgColor,\r\n        initialTextColor,\r\n      ]\"\r\n      :title=\"altText\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      {{ initial }}\r\n    </div>\r\n    <div\r\n      v-else\r\n      :class=\"[\r\n        'w-full h-full flex items-center justify-center',\r\n        initialBgColor,\r\n        initialTextColor,\r\n      ]\"\r\n      :title=\"altText\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"w-2/3 h-2/3\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n        <path fill-rule=\"evenodd\" d=\"M10 2a5 5 0 100 10 5 5 0 000-10zM2 16.5A7.5 7.5 0 0110 9a7.5 7.5 0 018 7.5v.25a.25.25 0 01-.25.25H2.25a.25.25 0 01-.25-.25v-.25z\" clip-rule=\"evenodd\" />\r\n      </svg>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, ref, watch } from 'vue'\r\n\r\nconst props = defineProps({\r\n  avatarUrl: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n  name: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  size: {\r\n    type: String,\r\n    default: 'md', // 'xs', 'sm', 'md', 'lg', 'xl'\r\n    validator: (value: string) => ['xs', 'sm', 'md', 'lg', 'xl'].includes(value),\r\n  },\r\n  initialBgColor: {\r\n    type: String,\r\n    default: 'bg-gray-200 dark:bg-gray-700', // لون افتراضي للخلفية\r\n  },\r\n  initialTextColor: {\r\n    type: String,\r\n    default: 'text-gray-600 dark:text-gray-300', // لون افتراضي للنص\r\n  },\r\n})\r\n\r\n// Internal state to track if image failed and we should show initial/icon\r\nconst showInitial = ref(false)\r\n\r\n// Calculate the initial character from the name\r\nconst initial = computed(() => {\r\n  return props.name?.trim()?.[0]?.toUpperCase() || null\r\n})\r\n\r\n// Generate alt text for the image or title for the fallback\r\nconst altText = computed(() => {\r\n  return props.name ? `الصورة الرمزية لـ ${props.name}` : 'الصورة الرمزية للمستخدم'\r\n})\r\n\r\n// Determine size classes based on the size prop\r\nconst sizeClasses = computed(() => {\r\n  switch (props.size) {\r\n    case 'xs': return 'w-6 h-6 text-xs';\r\n    case 'sm': return 'w-8 h-8 text-sm';\r\n    case 'lg': return 'w-12 h-12 text-lg';\r\n    case 'xl': return 'w-16 h-16 text-xl';\r\n    case 'md':\r\n    default:   return 'w-10 h-10 text-base';\r\n  }\r\n})\r\n\r\n// Watch for changes in avatarUrl to reset the error state\r\nwatch(() => props.avatarUrl, (newUrl) => {\r\n  showInitial.value = !newUrl; // Reset based on whether the new URL is truthy\r\n}, { immediate: true }); // Run immediately to set initial state\r\n\r\n// Handle image loading errors\r\nconst handleImageError = () => {\r\n  console.warn('فشل تحميل الصورة الرمزية:', props.avatarUrl);\r\n  showInitial.value = true; // Show fallback if image fails\r\n}\r\n</script>"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,UAAM,QAAQ;AAyBR,UAAA,cAAc,IAAI,KAAK;AAGvB,UAAA,UAAU,SAAS,MAAM;;AAC7B,eAAO,uBAAM,SAAN,mBAAY,WAAZ,mBAAqB,OAArB,mBAAyB,kBAAiB;AAAA,IAAA,CAClD;AAGK,UAAA,UAAU,SAAS,MAAM;AAC7B,aAAO,MAAM,OAAO,qBAAqB,MAAM,IAAI,KAAK;AAAA,IAAA,CACzD;AAGK,UAAA,cAAc,SAAS,MAAM;AACjC,cAAQ,MAAM,MAAM;AAAA,QAClB,KAAK;AAAa,iBAAA;AAAA,QAClB,KAAK;AAAa,iBAAA;AAAA,QAClB,KAAK;AAAa,iBAAA;AAAA,QAClB,KAAK;AAAa,iBAAA;AAAA,QAClB,KAAK;AAAA,QACL;AAAkB,iBAAA;AAAA,MAAA;AAAA,IACpB,CACD;AAGD,UAAM,MAAM,MAAM,WAAW,CAAC,WAAW;AACvC,kBAAY,QAAQ,CAAC;AAAA,IAAA,GACpB,EAAE,WAAW,MAAM;;;;;;;;;;;;;;;;;;;;;;;;"}