{"version":3,"file":"user.mjs","sources":["../../../../stores/user.ts"],"sourcesContent":["// stores/user.ts\r\nimport { defineStore } from 'pinia';\r\nimport { useSupabaseClient, useSupabaseUser } from '#imports';\r\nimport type { Database, Tables } from '~/types/database.types'; // تأكد من المسار الصحيح\r\n\r\n// تعريف نوع البروفايل ليشمل الدور والحقول الجديدة\r\n// سيتم تحديث Tables<'profiles'> تلقائياً عند إعادة إنشاء الأنواع\r\n// تأكد من أن types/database.types.ts محدث ليشمل الأعمدة الجديدة\r\ntype Profile = Tables<'profiles'>; // النوع يأتي الآن من الأنواع المنشأة\r\n\r\nexport const useUserStore = defineStore('user', {\r\n  state: () => ({\r\n    supabaseUser: null as ReturnType<typeof useSupabaseUser>['value'],\r\n    // استخدم نوع Profile مباشرة من الأن المنشأة\r\n    profile: null as Profile | null,\r\n    isFetchingProfile: false,\r\n    fetchProfileError: null as string | null,\r\n  }),\r\n\r\n  getters: {\r\n    isLoggedIn: (state) => !!state.supabaseUser,\r\n    userEmail: (state) => state.supabaseUser?.email || '',\r\n    displayName: (state): string => {\r\n         if (state.profile?.full_name) {\r\n            return state.profile.full_name;\r\n         }\r\n         if (state.supabaseUser?.email) {\r\n            // اسم المستخدم الافتراضي هو الجزء الأول من البريد\r\n            return state.supabaseUser.email.split('@')[0];\r\n         }\r\n         return 'مستخدم';\r\n    },\r\n    userAvatar: (state) => state.profile?.avatar_url,\r\n    isAdmin: (state): boolean => state.profile?.role === 'admin',\r\n    userPoints: (state): number => state.profile?.points ?? 0,\r\n    userBio: (state): string | null => state.profile?.bio ?? null,\r\n    isLoadingProfile: (state): boolean => state.isFetchingProfile,\r\n    // Getter للتحقق من حالة إيقاف التعليق\r\n    isCommentingSuspended: (state): boolean => {\r\n        if (!state.profile || !state.profile.comment_suspended_until) {\r\n            return false; // غير موقوف إذا لا يوجد بروفايل أو تاريخ\r\n        }\r\n        try {\r\n            // قارن تاريخ الانتهاء بالتاريخ الحالي\r\n            return new Date(state.profile.comment_suspended_until) > new Date();\r\n        } catch {\r\n            console.error(\"Error parsing comment_suspended_until date:\", state.profile.comment_suspended_until);\r\n            return false; // اعتبره غير موقوف إذا كان التاريخ غير صالح\r\n        }\r\n    },\r\n     // Getter للتحقق من حالة الحظر\r\n     isBanned: (state): boolean => {\r\n        return state.profile?.is_banned ?? false;\r\n     }\r\n  },\r\n\r\n  actions: {\r\n    setSupabaseUser(user: ReturnType<typeof useSupabaseUser>['value']) {\r\n      this.supabaseUser = user;\r\n      if (!user) {\r\n        this.profile = null;\r\n        this.fetchProfileError = null;\r\n        this.isFetchingProfile = false;\r\n      }\r\n    },\r\n\r\n    async fetchProfile() {\r\n      const user = this.supabaseUser;\r\n      // --- Keep initial checks ---\r\n      if (!user || this.isFetchingProfile) {\r\n         if (this.profile && !this.isFetchingProfile) { console.log('[UserStore] Profile already loaded.'); return; }\r\n         if (this.isFetchingProfile) { console.log('[UserStore] Profile fetch already in progress.'); return; }\r\n         if (!user) { console.log('[UserStore] No user to fetch profile for.'); return; }\r\n      }\r\n\r\n      this.isFetchingProfile = true;\r\n      this.fetchProfileError = null;\r\n      const client = useSupabaseClient<Database>();\r\n      console.log('[UserStore] Fetching profile for user:', user.id);\r\n\r\n      try {\r\n        // --- تأكد من طلب كل الأعمدة المطلوبة ---\r\n        const { data, error, status } = await client\r\n          .from('profiles')\r\n          .select(`\r\n            id,\r\n            full_name,\r\n            avatar_url,\r\n            role,\r\n            points,\r\n            bio,\r\n            is_banned,\r\n            comment_suspended_until,\r\n            created_at,\r\n            updated_at\r\n          `) // اطلب كل الأعمدة التي تحتاجها في أي مكان بالتطبيق\r\n          .eq('id', user.id)\r\n          .single();\r\n\r\n        if (error && status !== 406) { // 406 means row not found (for .single())\r\n            // Handle specific errors like RLS violation if needed\r\n            console.error('[UserStore] Supabase error fetching profile:', error);\r\n            throw error;\r\n        }\r\n\r\n        if (data) {\r\n          console.log('[UserStore] Profile fetched:', data);\r\n          this.profile = data; // النوع يجب أن يتطابق الآن بفضل الأنواع المنشأة\r\n        } else {\r\n          console.warn('[UserStore] No profile found for user (or RLS prevented fetch):', user.id);\r\n          this.profile = null;\r\n          // Don't necessarily set an error here, profile might genuinely not exist yet\r\n        }\r\n      } catch (error: any) {\r\n        console.error('[UserStore] Catch block error fetching profile:', error.message);\r\n        this.profile = null; // Ensure profile is null on error\r\n        this.fetchProfileError = error.message || 'Failed to fetch profile.';\r\n      } finally {\r\n        this.isFetchingProfile = false; // Crucial: Ensure this always runs\r\n        console.log('[UserStore] Fetch profile finished. Fetching state:', this.isFetchingProfile); // Log final state\r\n      }\r\n    },\r\n\r\n    async logout() {\r\n        const client = useSupabaseClient();\r\n        console.log('[UserStore] Logging out...');\r\n        // Reset state immediately for faster UI feedback\r\n        this.profile = null;\r\n        this.supabaseUser = null;\r\n        this.isFetchingProfile = false; // Reset fetching state\r\n        this.fetchProfileError = null;\r\n\r\n        const { error } = await client.auth.signOut();\r\n        if (error) {\r\n            console.error('Error logging out:', error.message);\r\n            // Maybe show toast error to user\r\n        } else {\r\n            console.log('[UserStore] Logout successful, navigating to /');\r\n            // Navigate after state is cleared\r\n            await navigateTo('/');\r\n        }\r\n    }\r\n  }\r\n})"],"names":[],"mappings":"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"}