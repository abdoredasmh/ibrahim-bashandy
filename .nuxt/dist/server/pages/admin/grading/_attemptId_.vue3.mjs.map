{"version":3,"file":"_attemptId_.vue3.mjs","sources":["../../../../../../pages/admin/grading/[attemptId].vue"],"sourcesContent":["<template>\r\n  <div class=\"p-4 sm:p-6 lg:p-8\">\r\n    <!-- Back Link -->\r\n    <NuxtLink\r\n      to=\"/admin/grading\"\r\n      class=\"inline-flex items-center text-sm text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 mb-4 transition-colors duration-150 ease-in-out group\"\r\n    >\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-5 h-5 me-1 transform transition-transform duration-150 ease-in-out group-hover:-translate-x-0.5\">\r\n        <path fill-rule=\"evenodd\" d=\"M12.79 5.23a.75.75 0 0 1-.02 1.06L8.832 10l3.938 3.71a.75.75 0 1 1-1.04 1.08l-4.5-4.25a.75.75 0 0 1 0-1.08l4.5-4.25a.75.75 0 0 1 1.06.02Z\" clip-rule=\"evenodd\" />\r\n      </svg>\r\n      العودة لقائمة التصحيح\r\n    </NuxtLink>\r\n\r\n    <!-- Loading State -->\r\n    <div v-if=\"pending\" class=\"text-center py-16\">\r\n      <LoadingSpinner class=\"w-10 h-10 text-primary mx-auto\" />\r\n      <p class=\"mt-4 text-lg text-gray-500 dark:text-gray-400\">جارٍ تحميل تفاصيل المحاولة...</p>\r\n    </div>\r\n\r\n    <!-- Error State -->\r\n    <div v-else-if=\"loadError || !attemptData\" class=\"error-box p-6\">\r\n      <h2 class=\"text-xl font-semibold text-red-800 dark:text-red-300 mb-3\">خطأ في التحميل</h2>\r\n      <p class=\"text-red-700 dark:text-red-400\">{{ loadErrorReason || 'حدث خطأ غير متوقع أثناء تحميل بيانات المحاولة.' }}</p>\r\n      <!-- Display Supabase error message if available and different -->\r\n      <pre v-if=\"loadError && loadError.message && loadErrorReason !== loadError.message\" class=\"mt-2 text-sm bg-red-100 dark:bg-red-900/50 p-2 rounded overflow-x-auto\">{{ loadError.message }}</pre>\r\n      <NuxtLink to=\"/admin/grading\" class=\"button-secondary mt-6\">العودة للقائمة</NuxtLink>\r\n    </div>\r\n\r\n    <!-- Grading Interface -->\r\n    <div v-else class=\"space-y-8\">\r\n      <h1 class=\"text-3xl font-bold text-gray-800 dark:text-gray-100 mb-4\">\r\n        تصحيح محاولة: <span class=\"font-mono text-2xl text-primary-600 dark:text-primary-400\">#{{ attemptData.id }}</span>\r\n      </h1>\r\n\r\n      <!-- Attempt, Quiz & Student Info Box -->\r\n      <div class=\"p-5 bg-white dark:bg-gray-800 rounded-lg shadow-md border dark:border-gray-700\">\r\n        <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 border-b dark:border-gray-600 pb-2\">تفاصيل المحاولة والمعلومات الأساسية</h2>\r\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4 text-sm mt-4\">\r\n          <!-- Column 1: Attempt Info -->\r\n          <div class=\"space-y-2\">\r\n            <InfoItem label=\"معرف المحاولة:\" :value=\"`#${attemptData.id}`\" valueClass=\"font-mono\"/>\r\n            <InfoItem label=\"تاريخ الإرسال:\" :value=\"formatDate(attemptData.submitted_at)\"/>\r\n            <InfoItem label=\"الحالة الحالية:\">\r\n                <span :class=\"getStatusBadgeClass(attemptData.grading_status)\">\r\n                    {{ getGradingStatusText(attemptData.grading_status) }}\r\n                </span>\r\n            </InfoItem>\r\n            \r\n          </div>\r\n          <!-- Column 2: Student & Quiz Info -->\r\n          <div class=\"space-y-2\">\r\n            <InfoItem label=\"الطالب:\">\r\n              <span class=\"font-medium text-gray-900 dark:text-gray-100\">{{ studentData?.full_name ?? `مستخدم (${attemptData.user_id.substring(0, 8)}...)` }}</span>\r\n            </InfoItem>\r\n             <InfoItem label=\"الاختبار:\">\r\n               <span class=\"font-medium text-gray-900 dark:text-gray-100\">{{ quizData?.title ?? 'اختبار غير متاح' }}</span>\r\n             </InfoItem>\r\n             <InfoItem label=\"الدورة التدريبية:\">\r\n               <span class=\"font-medium text-gray-900 dark:text-gray-100\">{{ courseData?.title ?? 'غير محدد' }}</span>\r\n             </InfoItem>\r\n          </div>\r\n          <!-- Column 3: Score Info -->\r\n          <div class=\"space-y-2\">\r\n            <InfoItem label=\"الدرجة الآلية:\" :value=\"`${attemptData.score ?? 0} / ${autoGradablePoints}`\" />\r\n            <InfoItem label=\"الدرجة اليدوية (المسجلة):\" :value=\"`${attemptData.manual_score ?? '-'} / ${manualGradablePoints}`\" v-if=\"attemptData.grading_status === 'graded'\" />\r\n            <InfoItem label=\"الدرجة الإجمالية (المسجلة):\" :value=\"`${attemptData.total_score ?? '-'} / ${totalPossiblePoints}`\" v-if=\"attemptData.grading_status === 'graded'\" />\r\n            <InfoItem label=\"إجمالي نقاط الاختبار:\" :value=\"totalPossiblePoints.toString()\" />\r\n            <InfoItem label=\"علامة النجاح:\" :value=\"`${quizData?.pass_mark_percentage ?? 'N/A'}%`\" />\r\n             <InfoItem label=\"نتيجة الاختبار (المسجلة):\" v-if=\"attemptData.grading_status === 'graded'\">\r\n                <span :class=\"attemptData.passed ? 'text-green-600 dark:text-green-400 font-semibold' : 'text-red-600 dark:text-red-400 font-semibold'\">\r\n                    {{ attemptData.passed ? 'ناجح' : 'راسب' }}\r\n                </span>\r\n            </InfoItem>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Written Questions Grading Area -->\r\n      <form @submit.prevent=\"submitManualGrades\" class=\"space-y-6\">\r\n        <h2 class=\"text-xl font-semibold text-gray-800 dark:text-gray-200 border-b pb-2 dark:border-gray-700\">\r\n            الأسئلة الكتابية\r\n            <span v-if=\"questionsToGrade.length > 0\">(مطلوب تصحيح {{ questionsToGrade.length }} سؤال)</span>\r\n            <span v-else-if=\"writtenQuestions.length > 0 && questionsToGrade.length === 0\">(جميع الأسئلة الكتابية مصححة)</span>\r\n        </h2>\r\n\r\n         <div v-if=\"writtenQuestions.length === 0\" class=\"info-box\">\r\n             <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-10 h-10 mx-auto text-gray-400 mb-2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\" /></svg>\r\n             لا توجد أسئلة كتابية في هذا الاختبار.\r\n         </div>\r\n         <div v-else-if=\"questionsToGrade.length === 0 && attemptData.grading_status === 'graded'\" class=\"info-box\">\r\n             <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-10 h-10 mx-auto text-green-500 mb-2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\" /></svg>\r\n             تم تصحيح جميع الأسئلة الكتابية لهذه المحاولة بالفعل.\r\n         </div>\r\n\r\n        <!-- Loop through written questions that need grading (or display already graded ones) -->\r\n        <div\r\n          v-for=\"(question, index) in writtenQuestions\"\r\n          :key=\"question.id\"\r\n          class=\"p-4 md:p-5 bg-gray-50 dark:bg-gray-800/50 rounded-lg border dark:border-gray-700 shadow-sm transition-all duration-150 ease-in-out\"\r\n          :class=\"{\r\n            'border-primary-500 dark:border-primary-600 ring-1 ring-primary-500 dark:ring-primary-600': isQuestionGraded(question.id), // Highlight graded\r\n            'border-red-500 dark:border-red-600 ring-1 ring-red-500 dark:ring-red-600': scoreErrors[question.id] // Highlight errors\r\n          }\"\r\n        >\r\n          <!-- Question Header -->\r\n          <div class=\"flex justify-between items-baseline mb-3 border-b dark:border-gray-600 pb-2\">\r\n             <p class=\"question-number text-sm font-semibold text-gray-600 dark:text-gray-400\">\r\n               السؤال الكتابي #{{ index + 1 }} <span class=\"text-xs font-mono text-gray-400 dark:text-gray-500\">({{ question.id }})</span>\r\n             </p>\r\n             <span class=\"text-xs font-medium text-gray-500 dark:text-gray-300\">النقاط المتاحة: {{ question.points ?? 1 }}</span>\r\n          </div>\r\n\r\n          <!-- Question Text (Rendered Markdown) -->\r\n          <div class=\"question-text text-base font-medium text-gray-800 dark:text-gray-200 mb-4 prose prose-sm dark:prose-invert max-w-none\" v-html=\"renderMarkdown(question.question_text ?? '')\"></div>\r\n          <!-- Optional: Display model answer if available\r\n          <div v-if=\"question.model_answer\" class=\"model-answer-box mb-4 p-3 bg-blue-50 dark:bg-blue-900/30 rounded border border-blue-200 dark:border-blue-700\">\r\n             <p class=\"text-xs font-medium text-blue-600 dark:text-blue-300 mb-1\">الإجابة النموذجية:</p>\r\n             <p class=\"text-sm text-blue-800 dark:text-blue-200 whitespace-pre-wrap\">{{ question.model_answer }}</p>\r\n           </div>\r\n          -->\r\n\r\n          <!-- Student Answer -->\r\n          <div class=\"student-answer-box mt-3 mb-4\">\r\n            <p class=\"text-xs font-semibold text-gray-500 dark:text-gray-400 mb-1\">إجابة الطالب:</p>\r\n            <p class=\"text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap min-h-[40px]\">\r\n              {{ studentAnswerForQuestion(question.id) || '-- لا توجد إجابة --' }}\r\n            </p>\r\n          </div>\r\n\r\n          <!-- Grading Input Area -->\r\n           <div class=\"grading-input-area mt-4\">\r\n                <label :for=\"`score-${question.id}`\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">الدرجة الممنوحة:</label>\r\n                <div class=\"flex items-center\">\r\n                    <input\r\n                      type=\"number\"\r\n                      :id=\"`score-${question.id}`\"\r\n                      v-model.number=\"manualScores[question.id]\"\r\n                      :max=\"question.points ?? 1\"\r\n                      min=\"0\"\r\n                      step=\"0.5\"\r\n                      required\r\n                      class=\"input-field w-28 text-center text-base font-medium appearance-none\"\r\n                      :class=\"{ 'border-red-500 dark:border-red-600 ring-1 ring-red-500 dark:ring-red-600 focus:ring-red-500 focus:border-red-500': scoreErrors[question.id] }\"\r\n                      :disabled=\"isSaving || attemptData.grading_status === 'graded'\"\r\n                      @input=\"validateScore(question.id, question.points ?? 1)\"\r\n                      aria-describedby=\"score-error-{{question.id}}\"\r\n                      placeholder=\"0\"\r\n                    />\r\n                    <span class=\"text-base font-medium text-gray-500 dark:text-gray-400 ms-2\"> / {{ question.points ?? 1 }}</span>\r\n                </div>\r\n                 <p v-if=\"scoreErrors[question.id]\" :id=\"`score-error-${question.id}`\" class=\"mt-1 text-xs text-red-600 dark:text-red-400\">{{ scoreErrors[question.id] }}</p>\r\n                 <p v-else-if=\"isQuestionGraded(question.id)\" class=\"mt-1 text-xs text-green-600 dark:text-green-400\">تم حفظ الدرجة.</p>\r\n           </div>\r\n        </div>\r\n\r\n        <!-- Submit Button Area (Only if grading is pending) -->\r\n        <div v-if=\"attemptData.grading_status !== 'graded' && writtenQuestions.length > 0\" class=\"pt-6 border-t dark:border-gray-700 sticky bottom-0 bg-gradient-to-t from-white dark:from-gray-900 pb-4 -mx-4 sm:-mx-6 lg:-mx-8 px-4 sm:px-6 lg:px-8\">\r\n          <div class=\"bg-gray-100 dark:bg-gray-700/50 p-4 rounded-lg mb-4 border dark:border-gray-600 flex flex-col sm:flex-row justify-between items-center gap-4\">\r\n              <div class=\"text-center sm:text-right\">\r\n                  <p class=\"text-sm text-gray-600 dark:text-gray-300\">النتيجة النهائية (تقديرية):</p>\r\n                  <p class=\"text-2xl font-bold text-primary-700 dark:text-primary-400\">\r\n                      {{ calculatedFinalScore }} / {{ totalPossiblePoints }}\r\n                      <span class=\"text-lg font-medium text-gray-500 dark:text-gray-400\">({{ calculatedPercentage }}%)</span>\r\n                  </p>\r\n                  <p v-if=\"passStatus !== null\" :class=\"['text-sm font-medium', passStatus ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400']\">\r\n                    {{ passStatus ? 'ناجح' : 'راسب' }} (علامة النجاح: {{ quizData?.pass_mark_percentage ?? 'N/A' }}%)\r\n                  </p>\r\n              </div>\r\n               <div class=\"flex-shrink-0 w-full sm:w-auto\">\r\n                 <button\r\n                   type=\"submit\"\r\n                   class=\"button-primary w-full sm:w-auto\"\r\n                   :disabled=\"isSaving ||  Object.values(scoreErrors).some(e => e !== null) || !allScoresEnteredForPending\"\r\n                   aria-label=\"حفظ التصحيح وإنهاء المراجعة\"\r\n                 >\r\n                     <LoadingSpinner v-if=\"isSaving\" class=\"w-5 h-5 me-2 animate-spin\" />\r\n                     {{ isSaving ? 'جارٍ الحفظ...' : (questionsToGrade.length > 0 ? `حفظ تصحيح ${questionsToGrade.length} سؤال` : 'حفظ التصحيح وإنهاء المراجعة') }}\r\n                 </button>\r\n               </div>\r\n          </div>\r\n           <p v-if=\"!allScoresEnteredForPending && questionsToGrade.length > 0\" class=\"text-yellow-700 dark:text-yellow-400 text-xs text-center sm:text-right mt-1\">\r\n               يجب إدخال درجة لجميع الأسئلة المطلوب تصحيحها.\r\n            </p>\r\n           <p v-if=\"saveError\" class=\"text-red-600 dark:text-red-400 text-sm text-center sm:text-right mt-1\">{{ saveError }}</p>\r\n        </div>\r\n         <div v-else-if=\"attemptData.grading_status === 'graded'\" class=\"text-center mt-6\">\r\n            <p class=\"text-lg font-medium text-green-700 dark:text-green-400\">تم تصحيح هذه المحاولة بالكامل.</p>\r\n            <!-- Optionally add a button to re-grade if needed -->\r\n            <!-- <button type=\"button\" @click=\"enableReGrading\" class=\"button-secondary mt-4\">السماح بإعادة التصحيح</button> -->\r\n        </div>\r\n      </form>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, shallowRef, watch, reactive } from 'vue';\r\nimport { useRoute, useSupabaseClient, useAsyncData, definePageMeta, createError, navigateTo, useHead } from '#imports';\r\nimport type { Database, Tables, Json, Enums } from '~/types/database.types';\r\nimport LoadingSpinner from '~/components/LoadingSpinner.vue';\r\nimport InfoItem from '~/components/admin/infoItem.vue';\r\n// Use DOMPurify for safer HTML rendering if markdown source is potentially untrusted\r\nimport { marked } from 'marked';\r\nimport DOMPurify from 'dompurify';\r\n\r\n// --- Types ---\r\ntype GradingStatus = Enums<'grading_status_enum'>;\r\n// Define a more specific type for parsed answers, including the manual score map\r\ntype ParsedAnswers = Record<string | number, any> & {\r\n  manual_score_map?: Record<string | number, number>;\r\n  // feedback_map?: Record<string | number, string>; // Example if feedback is added later\r\n};\r\ntype QuizAttemptFull = Omit<Tables<'quiz_attempts'>, 'answers'> & {\r\n    answers: Json; // Keep original JSON type for DB compatibility\r\n    answers_parsed?: ParsedAnswers; // Add the parsed version\r\n};\r\ntype QuizFull = Tables<'quizzes'> & { study_courses?: Pick<Tables<'study_courses'>, 'id' | 'title'> | null }; // Allow nested course to be possibly null\r\ntype StudentProfile = Pick<Tables<'profiles'>, 'id' | 'full_name'>;\r\ntype WrittenQuestion = Tables<'quiz_questions'> & { type: 'written' };\r\ntype CourseInfo = Pick<Tables<'study_courses'>, 'id' | 'title'> | null;\r\ntype FetchedGradingData = {\r\n  attempt: QuizAttemptFull | null;\r\n  quiz: QuizFull | null;\r\n  student: StudentProfile | null;\r\n  allQuestions: Tables<'quiz_questions'>[];\r\n  course: CourseInfo;\r\n};\r\n\r\n// --- Page Meta & Middleware ---\r\ndefinePageMeta({\r\n  layout: 'admin',\r\n  middleware: ['auth', 'admin']\r\n});\r\n\r\n// --- Composables ---\r\nconst supabase = useSupabaseClient<Database>();\r\nconst route = useRoute();\r\n// TODO: Implement a proper notification store (e.g., using Pinia and a toast library)\r\n// const notificationStore = useNotificationStore();\r\n\r\n// --- Attempt ID ---\r\nconst attemptId = computed<number>(() => {\r\n    const id = parseInt(route.params.attemptId as string, 10);\r\n    if (isNaN(id) || id <= 0) {\r\n         throw createError({ statusCode: 400, statusMessage: 'معرف المحاولة غير صالح أو مفقود.', fatal: true });\r\n    }\r\n    return id;\r\n});\r\n\r\n// --- Reactive State ---\r\n// Use shallowRef for potentially large/complex objects fetched from DB if deep reactivity isn't strictly needed for the object itself\r\nconst attemptData = shallowRef<QuizAttemptFull | null>(null);\r\nconst quizData = shallowRef<QuizFull | null>(null);\r\nconst studentData = shallowRef<StudentProfile | null>(null);\r\nconst allQuestions = shallowRef<Tables<'quiz_questions'>[]>([]);\r\nconst courseData = shallowRef<CourseInfo>(null);\r\n\r\n// Use reactive for objects where reactivity of individual properties (keys) is essential\r\nconst manualScores = reactive<Record<string | number, number | null>>({});\r\nconst scoreErrors = reactive<Record<string | number, string | null>>({});\r\n\r\nconst isSaving = ref(false);\r\nconst saveError = ref<string | null>(null);\r\nconst loadErrorReason = ref<string | null>(null); // Specific reason for loading failure\r\n\r\n// --- Data Fetching (`useAsyncData`) ---\r\n// Use a more descriptive key, especially if fetching multiple attempts elsewhere\r\nconst { data: fetchedData, pending, error: loadError } = await useAsyncData<FetchedGradingData>(\r\n  `admin-grading-attempt-details-${attemptId.value}`,\r\n  async () => {\r\n    const currentAttemptId = attemptId.value;\r\n    console.log(`Fetching details for attempt ${currentAttemptId}`);\r\n    loadErrorReason.value = null; // Reset load error reason\r\n\r\n    // 1. Fetch the attempt\r\n    const { data: attempt, error: attemptError } = await supabase\r\n      .from('quiz_attempts')\r\n      .select('*')\r\n      .eq('id', currentAttemptId)\r\n      .maybeSingle();\r\n\r\n    if (attemptError) {\r\n        console.error(\"Error fetching attempt:\", attemptError);\r\n        loadErrorReason.value = 'فشل في جلب بيانات المحاولة من قاعدة البيانات.';\r\n        // Throw non-fatal error to show error box in the component\r\n        throw createError({ statusCode: 500, message: loadErrorReason.value, fatal: false });\r\n    }\r\n    if (!attempt) {\r\n        loadErrorReason.value = 'لم يتم العثور على المحاولة المطلوبة بالمعرف المحدد.';\r\n        throw createError({ statusCode: 404, message: loadErrorReason.value, fatal: false });\r\n    }\r\n\r\n    // Parse student answers from JSONB safely\r\n    let parsedAnswers: ParsedAnswers = {};\r\n    if (attempt.answers && typeof attempt.answers === 'object' && !Array.isArray(attempt.answers)) {\r\n      // Shallow copy is usually sufficient here\r\n      parsedAnswers = { ...(attempt.answers as Record<string, any>) };\r\n    } else if (attempt.answers) {\r\n        console.warn(`Attempt ${attempt.id} has non-object 'answers' field:`, attempt.answers);\r\n    }\r\n    (attempt as QuizAttemptFull).answers_parsed = parsedAnswers;\r\n\r\n\r\n    // 2. Fetch related data in parallel\r\n    const [quizRes, studentRes, questionsRes] = await Promise.all([\r\n      // Select course directly via relationship for efficiency\r\n      supabase.from('quizzes').select('*, study_courses(id, title)').eq('id', attempt.quiz_id).maybeSingle(),\r\n      supabase.from('profiles').select('id, full_name').eq('id', attempt.user_id).maybeSingle(),\r\n      supabase.from('quiz_questions').select('*').eq('quiz_id', attempt.quiz_id).order('question_order'),\r\n    ]).catch(err => {\r\n        console.error(\"Error during parallel fetches:\", err);\r\n        loadErrorReason.value = 'حدث خطأ أثناء جلب البيانات المرتبطة (الاختبار، الطالب، أو الأسئلة).';\r\n        throw createError({ statusCode: 500, message: loadErrorReason.value, fatal: false });\r\n    });\r\n\r\n    // Handle results and potential errors/null data gracefully\r\n    const quizData = quizRes?.data ?? null;\r\n    if (quizRes?.error) console.error(\"Error fetching quiz:\", quizRes.error);\r\n\r\n    const studentProfile = studentRes?.data ?? null;\r\n    if (studentRes?.error) console.error(\"Error fetching student profile:\", studentRes.error);\r\n\r\n    const questionsList = questionsRes?.data ?? [];\r\n    if (questionsRes?.error) console.error(\"Error fetching questions:\", questionsRes.error);\r\n\r\n    // Extract course data (already selected via the quiz query)\r\n    const courseInfo = quizData?.study_courses ?? null;\r\n\r\n    if (!quizData) console.warn(`Quiz data not found for quiz ID: ${attempt.quiz_id}`);\r\n    if (!studentProfile) console.warn(`Student profile not found for user ID: ${attempt.user_id}`);\r\n\r\n    return {\r\n      attempt: attempt as QuizAttemptFull,\r\n      quiz: quizData,\r\n      student: studentProfile,\r\n      allQuestions: questionsList,\r\n      course: courseInfo\r\n    };\r\n  }, {\r\n    default: () => ({ attempt: null, quiz: null, student: null, allQuestions: [], course: null }),\r\n    watch: [attemptId] // Re-fetch if the attempt ID changes dynamically (less likely here)\r\n  }\r\n);\r\n\r\n// --- Watcher to Update Local State & Initialize Scores ---\r\nwatch(fetchedData, (newData) => {\r\n  // Reset state before applying new data to prevent potential inconsistencies\r\n  attemptData.value = null;\r\n  quizData.value = null;\r\n  studentData.value = null;\r\n  allQuestions.value = [];\r\n  courseData.value = null;\r\n  // Clear reactive objects carefully\r\n  Object.keys(manualScores).forEach(key => delete manualScores[key]);\r\n  Object.keys(scoreErrors).forEach(key => delete scoreErrors[key]);\r\n\r\n  if (newData?.attempt && newData.allQuestions) {\r\n    console.log(\"Watcher: Data received, updating state and initializing scores.\");\r\n    attemptData.value = newData.attempt;\r\n    quizData.value = newData.quiz;\r\n    studentData.value = newData.student;\r\n    allQuestions.value = newData.allQuestions; // Update the source for computed props\r\n    courseData.value = newData.course;\r\n\r\n    // Initialize scores based on the *newly fetched* data's written questions\r\n    const currentWrittenQuestions = newData.allQuestions.filter(q => q.type === 'written') as WrittenQuestion[];\r\n    if (currentWrittenQuestions.length > 0) {\r\n        console.log(`Watcher: Initializing scores for ${currentWrittenQuestions.length} written questions.`);\r\n        const existingScores = newData.attempt.answers_parsed?.manual_score_map ?? {};\r\n        currentWrittenQuestions.forEach(q => {\r\n            if (q.id !== undefined && q.id !== null) {\r\n                // Initialize with saved score if exists, otherwise null\r\n                manualScores[q.id] = typeof existingScores[q.id] === 'number' ? existingScores[q.id] : null;\r\n                scoreErrors[q.id] = null; // Reset potential errors\r\n            } else {\r\n                 console.warn(\"Watcher: Question found without a valid ID during score initialization:\", q);\r\n            }\r\n        });\r\n        console.log(\"Watcher: Manual scores initialized:\", JSON.parse(JSON.stringify(manualScores)));\r\n    } else {\r\n        console.log(\"Watcher: No written questions found in newData to initialize scores for.\");\r\n    }\r\n  } else if (!loadError.value) {\r\n     console.log(\"Watcher: Fetched data is null or incomplete, state cleared.\");\r\n  } else {\r\n      console.log(\"Watcher: Load error detected, state update skipped.\");\r\n  }\r\n}, { immediate: true }); // Run immediately to initialize state on load\r\n\r\n// --- Computed Properties ---\r\n\r\n// All written questions in the quiz\r\nconst writtenQuestions = computed<WrittenQuestion[]>(() => {\r\n  return allQuestions.value.filter(q => q.type === 'written') as WrittenQuestion[];\r\n});\r\n\r\n// Written questions that *still need* a score entered by the admin\r\nconst questionsToGrade = computed<WrittenQuestion[]>(() => {\r\n  if (attemptData.value?.grading_status === 'graded') return []; // Don't require grading if already finalized\r\n  return writtenQuestions.value.filter(q => manualScores[q.id] === null || manualScores[q.id] === undefined);\r\n});\r\n\r\n// Total possible points for the entire quiz\r\nconst totalPossiblePoints = computed<number>(() => {\r\n  return allQuestions.value.reduce((sum, q) => sum + (q.points ?? 1), 0);\r\n});\r\n\r\n// Total points from non-written (auto-graded) questions\r\nconst autoGradablePoints = computed<number>(() => {\r\n    return allQuestions.value\r\n        .filter(q => q.type !== 'written')\r\n        .reduce((sum, q) => sum + (q.points ?? 1), 0);\r\n});\r\n\r\n// Total points from written (manually graded) questions\r\nconst manualGradablePoints = computed<number>(() => {\r\n    return writtenQuestions.value.reduce((sum, q) => sum + (q.points ?? 1), 0);\r\n});\r\n\r\n\r\n// Dynamically calculates the sum of currently entered valid manual scores\r\nconst calculatedManualScore = computed<number>(() => {\r\n    return Object.entries(manualScores).reduce((sum, [key, score]) => {\r\n        // Check if the key corresponds to a written question and the score is valid\r\n        const questionExists = writtenQuestions.value.some(q => q.id.toString() === key);\r\n        if (questionExists && typeof score === 'number' && !isNaN(score) && scoreErrors[key] === null) {\r\n            return sum + score;\r\n        }\r\n        return sum;\r\n    }, 0);\r\n});\r\n\r\n// Calculates the potential final score based on auto-score + current valid manual scores\r\nconst calculatedFinalScore = computed<number>(() => {\r\n    const autoScore = attemptData.value?.score ?? 0;\r\n    return autoScore + calculatedManualScore.value;\r\n});\r\n\r\n// Calculates the percentage based on the dynamic final score\r\nconst calculatedPercentage = computed<number>(() => {\r\n    const total = totalPossiblePoints.value;\r\n    if (total <= 0) return 0;\r\n    const percentage = (calculatedFinalScore.value / total) * 100;\r\n    // Round to one decimal place for display\r\n    return Math.round(percentage * 10) / 10;\r\n});\r\n\r\n// Determines pass/fail status based on the dynamic percentage\r\nconst passStatus = computed<boolean | null>(() => {\r\n    if (!quizData.value || typeof quizData.value.pass_mark_percentage !== 'number') return null;\r\n    return calculatedPercentage.value >= quizData.value.pass_mark_percentage;\r\n});\r\n\r\n// Checks if scores have been entered for all questions *that need grading*\r\nconst allScoresEnteredForPending = computed<boolean>(() => {\r\n    return questionsToGrade.value.every(q => typeof manualScores[q.id] === 'number');\r\n});\r\n\r\n// --- Helper Functions ---\r\n\r\nconst formatDate = (dateString: string | null | undefined): string => {\r\n  if (!dateString) return 'N/A'; // Use N/A or 'غير محدد'\r\n  try {\r\n      return new Date(dateString).toLocaleString('ar-SA', {\r\n        year: 'numeric', month: 'short', day: 'numeric',\r\n        hour: 'numeric', minute: '2-digit', hour12: true // Example options\r\n      });\r\n   } catch {\r\n      console.warn(\"Failed to format date:\", dateString);\r\n      return dateString; // Fallback to original string if formatting fails\r\n   }\r\n};\r\n\r\nconst getGradingStatusText = (status: GradingStatus | null | undefined): string => {\r\n     switch (status) {\r\n        case 'pending': return 'قيد المراجعة (آلي)';\r\n        case 'auto_graded': return 'تم التصحيح آليًا';\r\n        case 'pending_manual': return 'يحتاج تصحيحًا يدويًا';\r\n        case 'graded': return 'تم التصحيح بالكامل';\r\n        default: return 'غير معروف';\r\n     }\r\n};\r\n\r\nconst getStatusBadgeClass = (status: GradingStatus | null | undefined): string => {\r\n  const baseClass = 'px-2.5 py-0.5 rounded-full text-xs font-medium inline-block';\r\n   switch (status) {\r\n    case 'pending_manual': return `${baseClass} bg-yellow-100 text-yellow-800 dark:bg-yellow-900/70 dark:text-yellow-200 border border-yellow-300 dark:border-yellow-700`;\r\n    case 'graded': return `${baseClass} bg-green-100 text-green-800 dark:bg-green-900/70 dark:text-green-200 border border-green-300 dark:border-green-700`;\r\n    case 'auto_graded': return `${baseClass} bg-blue-100 text-blue-800 dark:bg-blue-900/70 dark:text-blue-200 border border-blue-300 dark:border-blue-700`;\r\n    case 'pending': return `${baseClass} bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600`;\r\n    default: return `${baseClass} bg-gray-200 text-gray-500 dark:bg-gray-600 dark:text-gray-400 border border-gray-400 dark:border-gray-500`;\r\n  }\r\n};\r\n\r\nconst studentAnswerForQuestion = (questionId: string | number): string | null => {\r\n    // Access the parsed answers safely\r\n    return attemptData.value?.answers_parsed?.[questionId] ?? null;\r\n};\r\n\r\n// Function to check if a specific question has a score saved in the DB (based on initialization)\r\nconst isQuestionGraded = (questionId: string | number): boolean => {\r\n    return typeof attemptData.value?.answers_parsed?.manual_score_map?.[questionId] === 'number';\r\n};\r\n\r\n\r\n// Renders Markdown and sanitizes the output\r\nconst renderMarkdown = (text: string): string => {\r\n    if(!text) return '';\r\n    // Configure marked (optional, defaults are often okay)\r\n    marked.setOptions({\r\n      breaks: true, // Convert single line breaks to <br>\r\n      gfm: true,    // Enable GitHub Flavored Markdown\r\n      // Consider adding a syntax highlighter if needed\r\n    });\r\n    const rawHtml = marked.parse(text);\r\n    // Sanitize the HTML output to prevent XSS attacks, especially if question_text could contain user input\r\n    // Allow basic formatting tags, adjust as needed\r\n    return DOMPurify.sanitize(rawHtml, { USE_PROFILES: { html: true } });\r\n};\r\n\r\n// --- Validation ---\r\nconst validateScore = (questionId: string | number, maxPoints: number) => {\r\n    const score = manualScores[questionId];\r\n\r\n    // Allow null/empty temporarily, validation happens fully on submit attempt\r\n    if (score === null || score === undefined || score === '') {\r\n        scoreErrors[questionId] = null;\r\n        return;\r\n    }\r\n\r\n    // Check if it's a valid number\r\n    if (isNaN(score)) {\r\n         scoreErrors[questionId] = `الدرجة يجب أن تكون رقماً.`;\r\n         return;\r\n    }\r\n\r\n    // Check range\r\n    if (score < 0 || score > maxPoints) {\r\n        scoreErrors[questionId] = `الدرجة يجب أن تكون بين 0 و ${maxPoints}.`;\r\n        return;\r\n    }\r\n\r\n    // Optional: Check step validity (e.g., only allow increments of 0.5)\r\n    // Multiply by 10 and check remainder with 5 to handle floating point inaccuracies\r\n    if ((score * 10) % 5 !== 0) {\r\n         scoreErrors[questionId] = `الدرجة يجب أن تكون بمضاعفات 0.5 (مثل 0, 0.5, 1, 1.5...).`;\r\n         return;\r\n    }\r\n\r\n    // If all checks pass, clear the error\r\n    scoreErrors[questionId] = null;\r\n};\r\n\r\n// Validates all scores required for submission\r\nconst validateAllScoresForSubmit = (): boolean => {\r\n    let isValid = true;\r\n    // Only validate questions that are supposed to be graded in this submission\r\n    writtenQuestions.value.forEach(q => {\r\n        // We only *need* to validate if a score is entered or if it was previously null/invalid\r\n        const score = manualScores[q.id];\r\n        const maxPoints = q.points ?? 1;\r\n\r\n        // If the question is still pending grading, it must have a score\r\n        if (questionsToGrade.value.some(pendingQ => pendingQ.id === q.id)) {\r\n            if (score === null || score === undefined || score === '') {\r\n                scoreErrors[q.id] = 'الدرجة مطلوبة لهذا السؤال.';\r\n                isValid = false;\r\n            } else {\r\n                // If a score is entered, run the detailed validation\r\n                validateScore(q.id, maxPoints);\r\n                if (scoreErrors[q.id] !== null) {\r\n                    isValid = false;\r\n                }\r\n            }\r\n        } else {\r\n            // If the question is *not* in questionsToGrade (meaning it has a score already),\r\n            // still run validation in case the user changed it to something invalid.\r\n             if (score !== null && score !== undefined && score !== '') {\r\n                 validateScore(q.id, maxPoints);\r\n                 if (scoreErrors[q.id] !== null) {\r\n                     isValid = false;\r\n                 }\r\n             } else {\r\n                 // This case (already graded but score removed) might need specific handling\r\n                 // depending on desired behavior (allow un-grading?). For now, assume we only submit valid scores.\r\n                 console.warn(`Question ${q.id} was likely graded but score is now empty. Ignoring for submission.`);\r\n                 // Ensure no error is set for this case if we ignore it\r\n                 scoreErrors[q.id] = null;\r\n             }\r\n        }\r\n    });\r\n    return isValid;\r\n};\r\n\r\n// --- Form Submission ---\r\nconst submitManualGrades = async () => {\r\n  // Ensure essential data is loaded and not already saving\r\n  if (!attemptData.value || !quizData.value || isSaving.value) {\r\n      console.warn(\"Submission blocked: Missing data or already saving.\");\r\n      return;\r\n  }\r\n  // Prevent submission if already fully graded\r\n  if (attemptData.value.grading_status === 'graded') {\r\n      saveError.value = \"لا يمكن الإرسال، تم تصحيح هذه المحاولة بالفعل.\";\r\n      return;\r\n  }\r\n  // Prevent submission if there are no written questions at all\r\n  if (writtenQuestions.value.length === 0) {\r\n      saveError.value = \"لا توجد أسئلة كتابية لتصحيحها في هذا الاختبار.\";\r\n      return;\r\n  }\r\n\r\n  saveError.value = null; // Clear previous save errors\r\n\r\n  // Validate all relevant scores before proceeding\r\n  if (!validateAllScoresForSubmit()) {\r\n    saveError.value = \"يرجى مراجعة الدرجات المدخلة وتصحيح الأخطاء المميزة.\";\r\n    // Focus the first input field with an error for better UX\r\n    const firstErrorId = Object.keys(scoreErrors).find(key => scoreErrors[key] !== null);\r\n    if (firstErrorId) {\r\n        const element = document.getElementById(`score-${firstErrorId}`);\r\n        element?.focus();\r\n        element?.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Ensure all questions *requiring* grading have scores\r\n  if (!allScoresEnteredForPending.value) {\r\n      saveError.value = \"يرجى إدخال درجة لجميع الأسئلة الكتابية التي لم يتم تصحيحها بعد.\";\r\n       // Focus the first *pending* input field\r\n       const firstPendingQuestion = questionsToGrade.value[0];\r\n       if(firstPendingQuestion) {\r\n            const element = document.getElementById(`score-${firstPendingQuestion.id}`);\r\n            element?.focus();\r\n            element?.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n       }\r\n      return;\r\n  }\r\n\r\n\r\n  isSaving.value = true;\r\n\r\n  // Use computed properties for final calculations\r\n  const finalManualScore = calculatedManualScore.value;\r\n  const finalTotalScore = calculatedFinalScore.value;\r\n  const finalPassedStatus = passStatus.value ?? false; // Default to false if calculation somehow fails\r\n\r\n  // Prepare the map of manual scores for storage, ensuring only valid numbers are included\r\n  const manualScoresMapForStorage: Record<string, number> = {};\r\n  Object.entries(manualScores).forEach(([key, score]) => {\r\n      // Include if it's a valid number score and belongs to a written question\r\n      if (typeof score === 'number' && !isNaN(score) && writtenQuestions.value.some(q => q.id.toString() === key)) {\r\n          manualScoresMapForStorage[key] = score;\r\n      }\r\n  });\r\n\r\n  // Ensure we have the latest parsed answers to merge with\r\n  const currentParsedAnswers = attemptData.value.answers_parsed ?? {};\r\n\r\n  // Data for Supabase update\r\n  const updateData: Partial<Tables<'quiz_attempts'>> & { answers?: Json } = {\r\n    manual_score: finalManualScore,\r\n    total_score: finalTotalScore,\r\n    grading_status: 'graded', // Mark as fully graded upon successful manual submission\r\n    passed: finalPassedStatus,\r\n    // Record the time of manual grading completion\r\n    // Update the 'answers' JSONB field:\r\n    // Preserve existing answers and merge/overwrite the manual_score_map\r\n    answers: {\r\n      ...currentParsedAnswers, // Spread existing parsed data first\r\n      manual_score_map: manualScoresMapForStorage, // Add/update the manual scores\r\n      // feedback_map: manualFeedback.value // Add feedback map here if implemented\r\n    }\r\n  };\r\n\r\n  console.log(`Submitting final grades for attempt ${attemptData.value.id}:`, updateData);\r\n\r\n  try {\r\n    const { error: updateError } = await supabase\r\n      .from('quiz_attempts')\r\n      .update(updateData)\r\n      .eq('id', attemptData.value.id)\r\n      .select('id') // Select something small to confirm success\r\n      .single(); // Expect a single row update\r\n\r\n    if (updateError) {\r\n        // Throw the Supabase error to be caught below\r\n        throw updateError;\r\n    }\r\n\r\n    console.log(\"Manual grades submitted successfully!\");\r\n    // TODO: Replace alert with a notification system (e.g., toast)\r\n    // notificationStore.showSuccess(\"تم حفظ التصحيح بنجاح!\");\r\n    alert(\"تم حفظ التصحيح بنجاح!\"); // Placeholder\r\n\r\n    // Navigate back to the main grading list after successful save\r\n    await navigateTo('/admin/grading');\r\n\r\n  } catch (err: any) {\r\n    console.error(\"Error saving manual grades:\", err);\r\n    saveError.value = `فشل حفظ التصحيح: ${err.message || 'حدث خطأ غير متوقع في الاتصال بالخادم.'}`;\r\n    // Consider more specific error handling based on err.code or err.details if needed\r\n    // e.g., check for permission errors (403), network errors, etc.\r\n  } finally {\r\n    isSaving.value = false;\r\n  }\r\n};\r\n\r\n// --- Meta Tags ---\r\nuseHead({\r\n  // Use a function for dynamic title based on loaded data\r\n  title: computed(() => {\r\n      if (pending.value) return 'جاري تحميل التصحيح...';\r\n      if (attemptData.value) return `تصحيح محاولة #${attemptData.value.id}`;\r\n      return 'تصحيح محاولة';\r\n  }),\r\n  meta: [\r\n      { name: 'description', content: 'صفحة لتصحيح المحاولات الكتابية للاختبارات' }\r\n  ]\r\n});\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Basic Error Box Style */\r\n.error-box {\r\n  @apply p-4 border border-red-300 bg-red-50 text-red-700 rounded-md dark:bg-red-900/30 dark:border-red-700/50 dark:text-red-300;\r\n}\r\n/* Basic Info Box Style (for no written questions etc.) */\r\n.info-box {\r\n    @apply text-center text-gray-500 dark:text-gray-400 py-6 bg-gray-50 dark:bg-gray-800/40 rounded-md border dark:border-gray-700;\r\n}\r\n\r\n/* Standard Button Styles */\r\n.button-secondary {\r\n  @apply inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-150 ease-in-out;\r\n}\r\n.button-primary {\r\n  @apply inline-flex items-center justify-center px-5 py-2.5 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 dark:focus:ring-offset-gray-900 disabled:opacity-60 disabled:cursor-not-allowed transition-colors duration-150 ease-in-out;\r\n}\r\n\r\n/* Input Field Style */\r\n.input-field {\r\n   @apply shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500 disabled:opacity-70 disabled:cursor-not-allowed dark:disabled:bg-gray-700/50;\r\n}\r\n/* Remove number input spinners (for cleaner look) */\r\n.input-field[type=\"number\"]::-webkit-inner-spin-button,\r\n.input-field[type=\"number\"]::-webkit-outer-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n.input-field[type=\"number\"] {\r\n  -moz-appearance: textfield; /* Firefox */\r\n}\r\n\r\n/* Student Answer Box Styling */\r\n.student-answer-box {\r\n  @apply text-sm border p-3 rounded bg-white dark:bg-gray-700/60 border-gray-300 dark:border-gray-600 shadow-inner;\r\n}\r\n\r\n.grading-input-area {\r\n    @apply mt-3;\r\n}\r\n\r\n/* Styling for Markdown content using Tailwind Typography plugin */\r\n/* Ensure you have @tailwindcss/typography installed and configured */\r\n.question-text {\r\n    /* Base prose styles handle markdown elements like p, strong, em, ul, ol, li */\r\n    /* Adjust max-width if needed, max-w-none removes width constraint */\r\n    @apply prose prose-sm dark:prose-invert max-w-none;\r\n}\r\n/* Specific overrides if needed, though prose usually handles it */\r\n.question-text :deep(p) {\r\n    @apply mb-2 last:mb-0;\r\n}\r\n.question-text :deep(ul),\r\n.question-text :deep(ol) {\r\n    @apply my-3 ms-4; /* Adjust margin/padding as needed */\r\n}\r\n\r\n/* Sticky footer container for save button */\r\n/* Applied directly in the template for simplicity, but could be a class */\r\n/* .sticky-footer {\r\n    @apply sticky bottom-0 bg-gradient-to-t from-white dark:from-gray-900 pb-4 -mx-4 sm:-mx-6 lg:-mx-8 px-4 sm:px-6 lg:px-8 z-10;\r\n} */\r\n</style>"],"names":["_withAsyncContext","quizData"],"mappings":"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"}