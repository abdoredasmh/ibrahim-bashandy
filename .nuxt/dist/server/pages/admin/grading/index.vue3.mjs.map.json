{"file":"index.vue3.mjs","mappings":";;;;;;;;;AAqNA,MAAM,wBAA8C;;;;;AAJpD,UAAM,WAAW,kBAA4B;AAC9B,cAAU;AACzB,UAAM,QAAQ,SAAS;AAMvB,UAAM,iBAAiB,IAAiC,MAAM,MAAM,UAAkC,qBAAqB;AACrH,UAAA,mBAAmB,IAAmB,MAAM,MAAM,WAAW,OAAO,MAAM,MAAM,QAAQ,IAAI,IAAI;AAChG,UAAA,iBAAiB,IAAmB,MAAM,MAAM,SAAS,OAAO,MAAM,MAAM,MAAM,IAAI,IAAI;AAChG,UAAM,oBAAoB,IAAmB,MAAM,MAAM,aAAuB,IAAI;AAC9E,UAAA,sBAAsB,IAAmB,IAAI;AAC7C,UAAA,oBAAoB,IAAI,EAAE;AAC1B,UAAA,sBAAsB,IAAI,KAAK;AAG/B,UAAA,cAAc,IAAuB,EAAE;AACvC,UAAA,2BAA2B,IAAqB,EAAE;AAClD,UAAA,uBAAuB,IAAwB,EAAE;AACjD,UAAA,iBAAiB,IAAI,KAAK;AAC1B,UAAA,iBAAiB,IAAI,KAAK;AAC1B,UAAA,kBAAkB,IAAI,KAAK;AAG3B,UAAA,WAAW,WAAmC,EAAE;AAClC,QAAI,CAAC;AACnB,UAAA,cAAc,IAAI,KAAK;AACvB,UAAA,kBAAkB,IAAI,IAAI;AAC1B,UAAA,UAAU,IAAI,KAAK;AACnB,UAAA,QAAQ,IAAkB,IAAI;AACd,QAAwB,IAAI;AA+C5C,UAAA,yBAAyB,OAAO,eAAuB;AAC3D,UAAI,CAAC,cAAc,WAAW,KAAK,EAAE,SAAS,GAAG;AAC/C,6BAAqB,QAAQ,CAAC;AAC9B,wBAAgB,QAAQ;AACxB;AAAA,MAAA;AAEF,sBAAgB,QAAQ;AAEpB,UAAA;AACM,cAAA,EAAE,MAAM,OAAO,eAAe,MAAM,SACvC,KAAK,UAAU,EACf,OAAO,eAAe,EAGtB,MAAM,aAAa,IAAI,WAAW,KAAM,CAAA,GAAG,EAC3C,MAAM,EAAE;AAEX,YAAI,WAAkB,OAAA;AACD,6BAAA,QAAQ,QAAQ,CAAC;AAAA,eAClC,KAAU;AACN,gBAAA,MAAM,6BAA6B,IAAI,OAAO;AACtD,6BAAqB,QAAQ,CAAC;AAAA,MAAA,UAChC;AACE,wBAAgB,QAAQ;AAAA,MAAA;AAAA,IAE9B;AAC+B,aAAS,MAAM,uBAAuB,kBAAkB,KAAK,GAAG,GAAG;AAwK5F,UAAA,aAAa,CAAC,eAAsC;AACpD,UAAA,CAAC,WAAmB,QAAA;AACpB,UAAA;AACF,eAAO,IAAI,KAAK,UAAU,EAAE,eAAe,SAAS;AAAA;AAAA,UAClD,WAAW;AAAA,UACX,WAAW;AAAA,QAAA,CACZ;AAAA,eACM,GAAG;AACF,gBAAA,MAAM,0BAA0B,CAAC;AAClC,eAAA;AAAA,MAAA;AAAA,IAEX;AAEM,UAAA,uBAAuB,CAAC,WAA4D;AACxF,cAAQ,QAAQ;AAAA,QACd,KAAK;AAAyB,iBAAA;AAAA,QAC9B,KAAK;AAAiB,iBAAA;AAAA,QACtB,KAAK;AAAsB,iBAAA;AAAA,QAC3B,KAAK;AAAkB,iBAAA;AAAA,QACvB;AAAgB,iBAAA;AAAA,MAAA;AAAA,IAEpB;AAEM,UAAA,sBAAsB,CAAC,WAA4D;AACvF,YAAM,YAAY;AAClB,cAAQ,QAAQ;AAAA,QACd,KAAK;AAAkB,iBAAO,GAAG,SAAS;AAAA,QAC1C,KAAK;AAAU,iBAAO,GAAG,SAAS;AAAA,QAClC,KAAK;AAAe,iBAAO,GAAG,SAAS;AAAA,QACvC,KAAK;AAAW,iBAAO,GAAG,SAAS;AAAA,QACnC;AAAS,iBAAO,GAAG,SAAS;AAAA,MAAA;AAAA,IAEhC;AA8DM,UAAA,mBAAmB,SAAS,MAAM;AAC7B,aAAA,eAAe,UAAU,yBACzB,iBAAiB,UAAU,QAC3B,eAAe,UAAU,QACzB,kBAAkB,UAAU;AAAA,IAAA,CACtC;AAgCO,YAAA,EAAE,OAAO,kCAAkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../../../pages/admin/grading/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"p-4 sm:p-6\">\r\n    <h1 class=\"text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-6\">تصحيح الاختبارات</h1>\r\n\r\n    <!-- Filters Section -->\r\n    <div class=\"mb-6 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg border dark:border-gray-700 shadow-sm\">\r\n      <h2 class=\"text-lg font-medium text-gray-700 dark:text-gray-300 mb-3\">تصفية المحاولات</h2>\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <!-- Filter by Grading Status -->\r\n        <div>\r\n          <label for=\"statusFilter\" class=\"block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1\">حالة التصحيح:</label>\r\n          <select id=\"statusFilter\" v-model=\"selectedStatus\" @change=\"handleFilterChange\" class=\"input-field\">\r\n            <option :value=\"null\">الكل</option>\r\n            <option value=\"pending_manual\">يحتاج تصحيح يدوي</option>\r\n            <option value=\"graded\">تم تصحيحه</option>\r\n            <option value=\"auto_graded\">تم تصحيحه آلياً</option>\r\n            <option value=\"pending\">قيد المراجعة (آلي)</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- Filter by Course -->\r\n        <div>\r\n           <label for=\"courseFilter\" class=\"block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1\">الدورة:</label>\r\n           <select id=\"courseFilter\" v-model=\"selectedCourseId\" @change=\"handleCourseChange\" class=\"input-field\">\r\n             <option :value=\"null\">كل الدورات</option>\r\n             <option v-for=\"course in coursesList\" :key=\"course.id\" :value=\"course.id\">\r\n               {{ course.title }}\r\n             </option>\r\n             <option v-if=\"loadingCourses\" disabled>جارٍ تحميل الدورات...</option>\r\n             <option v-else-if=\"!loadingCourses && coursesList.length === 0\" disabled>لا توجد دورات متاحة</option>\r\n           </select>\r\n         </div>\r\n\r\n        <!-- Filter by Quiz (Depends on Course) -->\r\n        <div>\r\n          <label for=\"quizFilter\" class=\"block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1\">الاختبار:</label>\r\n          <select\r\n            id=\"quizFilter\"\r\n            v-model=\"selectedQuizId\"\r\n            @change=\"handleFilterChange\"\r\n            class=\"input-field\"\r\n            :disabled=\"!selectedCourseId || loadingQuizzes || quizzesListBasedOnCourse.length === 0\"\r\n          >\r\n            <option :value=\"null\">كل الاختبارات {{ selectedCourseId ? 'في الدورة المحددة' : '' }}</option>\r\n            <option v-for=\"quiz in quizzesListBasedOnCourse\" :key=\"quiz.id\" :value=\"quiz.id\">\r\n              {{ quiz.title }}\r\n            </option>\r\n             <option v-if=\"loadingQuizzes\" disabled>جارٍ تحميل الاختبارات...</option>\r\n             <option v-else-if=\"selectedCourseId && !loadingQuizzes && quizzesListBasedOnCourse.length === 0\" disabled>لا توجد اختبارات في هذه الدورة</option>\r\n             <option v-else-if=\"!selectedCourseId\" disabled>اختر دورة أولاً</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- Filter by Student (Search Input) -->\r\n         <div class=\"relative\">\r\n           <label for=\"studentSearch\" class=\"block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1\">الطالب:</label>\r\n           <input\r\n             type=\"text\"\r\n             id=\"studentSearch\"\r\n             v-model=\"studentSearchTerm\"\r\n             @input=\"debouncedFetchStudents\"\r\n             @focus=\"showStudentDropdown = true\"\r\n             @blur=\"handleStudentSearchBlur\"\r\n             placeholder=\"ابحث بالاسم أو المعرف...\"\r\n             class=\"input-field\"\r\n             autocomplete=\"off\"\r\n             aria-autocomplete=\"list\"\r\n             :aria-expanded=\"showStudentDropdown && (loadingStudents || filteredStudentsList.length > 0)\"\r\n             aria-controls=\"student-results-list\"\r\n           />\r\n           <!-- Dropdown for search results -->\r\n           <div\r\n             v-if=\"showStudentDropdown && (loadingStudents || filteredStudentsList.length > 0)\"\r\n             class=\"absolute z-10 mt-1 w-full bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto\"\r\n             id=\"student-results-list\"\r\n             role=\"listbox\"\r\n            >\r\n             <div v-if=\"loadingStudents\" class=\"px-4 py-2 text-sm text-gray-500 dark:text-gray-400\">جارٍ البحث...</div>\r\n             <ul v-else role=\"presentation\">\r\n               <li\r\n                 v-for=\"student in filteredStudentsList\"\r\n                 :key=\"student.id\"\r\n                 @mousedown=\"selectStudent(student)\"\r\n                 role=\"option\"\r\n                 :aria-selected=\"student.id === selectedStudentId\"\r\n                 class=\"px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-primary-50 dark:hover:bg-primary-800/50 cursor-pointer\"\r\n               >\r\n                 {{ student.full_name }} (ID: {{ student.id.substring(0, 8) }}...)\r\n               </li>\r\n                <li v-if=\"filteredStudentsList.length === 0 && !loadingStudents && studentSearchTerm.length > 1\" class=\"px-4 py-2 text-sm text-gray-500 dark:text-gray-400\">\r\n                  لا توجد نتائج مطابقة.\r\n                </li>\r\n             </ul>\r\n           </div>\r\n           <!-- Display selected student -->\r\n            <div v-if=\"selectedStudentId && selectedStudentName\" class=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\r\n                الطالب المحدد: {{ selectedStudentName }}\r\n                <button @click=\"clearStudentSelection\" class=\"text-red-500 hover:text-red-700 ms-1 text-xxs font-medium focus:outline-none\" aria-label=\"إلغاء اختيار الطالب\">(إلغاء)</button>\r\n            </div>\r\n         </div>\r\n\r\n      </div>\r\n      <!-- Reset button moved outside grid for better alignment -->\r\n       <div class=\"mt-4 text-right border-t pt-4 dark:border-gray-700\">\r\n           <button @click=\"resetFilters\" v-if=\"hasActiveFilters\" class=\"button-secondary text-sm\">\r\n                إعادة تعيين كل الفلاتر\r\n            </button>\r\n       </div>\r\n    </div>\r\n\r\n    <!-- Loading State -->\r\n    <div v-if=\"pending && attempts.length === 0\" class=\"text-center py-10\"> \r\n      <LoadingSpinner class=\"w-10 h-10 text-primary\" />\r\n      <p class=\"mt-3 text-gray-500 dark:text-gray-400\">جارٍ تحميل المحاولات...</p>\r\n    </div>\r\n\r\n    <!-- Error State -->\r\n    <div v-else-if=\"error\" class=\"error-box mt-6\">\r\n      <p>حدث خطأ أثناء تحميل المحاولات:</p>\r\n      <pre class=\"mt-2 text-sm bg-red-100 dark:bg-red-900/50 p-2 rounded overflow-x-auto\">{{ error.message }}</pre>\r\n      <button @click=\"() => loadAttempts(true)\" class=\"button-secondary mt-4\">إعادة المحاولة</button>\r\n    </div>\r\n\r\n    <!-- Empty State (Considering Filters) -->\r\n    <div v-else-if=\"attempts.length === 0 && !pending\" class=\"text-center py-10 bg-gray-50 dark:bg-gray-800/50 rounded-lg mt-6 border dark:border-gray-700\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-12 h-12 mx-auto text-gray-400 dark:text-gray-500\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z\" /></svg>\r\n      <p class=\"mt-3 font-medium text-gray-700 dark:text-gray-300\">\r\n        {{ hasActiveFilters ? 'لا توجد محاولات تطابق معايير التصفية الحالية.' : 'لا توجد محاولات لعرضها.' }}\r\n      </p>\r\n       <button @click=\"resetFilters\" v-if=\"hasActiveFilters\" class=\"button-secondary text-sm mt-4\">\r\n           إلغاء الفلاتر وعرض الكل\r\n       </button>\r\n    </div>\r\n\r\n    <!-- Attempts Table -->\r\n    <div v-else class=\"overflow-x-auto bg-white dark:bg-gray-800 shadow rounded-lg border dark:border-gray-700 mt-6\">\r\n      <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n        <thead class=\"bg-gray-50 dark:bg-gray-700/50\">\r\n           <!-- Table Headers -->\r\n          <tr>\r\n            <th scope=\"col\" class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">المعرف</th>\r\n            <th scope=\"col\" class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">الاختبار</th>\r\n            <th scope=\"col\" class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">الطالب</th>\r\n            <th scope=\"col\" class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">الحالة</th>\r\n            <th scope=\"col\" class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">تاريخ الإرسال</th>\r\n            <th scope=\"col\" class=\"px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">إجراء</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody class=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n          <!-- Table Rows -->\r\n          <tr v-for=\"attempt in attempts\" :key=\"attempt.id\" class=\"hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors duration-150 ease-in-out\">\r\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-500 dark:text-gray-400\">#{{ attempt.id }}</td>\r\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300\">{{ attempt.quizzes?.title ?? 'اختبار غير متاح' }}</td>\r\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300\">{{ attempt.profiles?.full_name ?? `مستخدم (${attempt.user_id.substring(0,8)}...)` }}</td>\r\n             <td class=\"px-6 py-4 whitespace-nowrap text-sm\">\r\n                 <span :class=\"getStatusBadgeClass(attempt.grading_status)\">\r\n                     {{ getGradingStatusText(attempt.grading_status) }}\r\n                 </span>\r\n             </td>\r\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{{ formatDate(attempt.submitted_at) }}</td>\r\n            <td class=\"px-6 py-4 whitespace-nowrap text-center text-sm font-medium\">\r\n              <NuxtLink\r\n                :to=\"`/admin/grading/${attempt.id}`\"\r\n                :class=\"['font-medium transition-colors duration-150 ease-in-out px-3 py-1 rounded',\r\n                  attempt.grading_status === 'pending_manual'\r\n                  ? 'text-primary-700 hover:text-primary-900 dark:text-primary-400 dark:hover:text-primary-300 hover:bg-primary-50 dark:hover:bg-primary-900/30'\r\n                  : 'text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700']\"\r\n                :aria-label=\"`تصحيح أو عرض محاولة الطالب ${attempt.profiles?.full_name ?? attempt.user_id}`\"\r\n              >\r\n                {{ attempt.grading_status === 'pending_manual' ? 'بدء التصحيح' : 'عرض المحاولة' }}\r\n              </NuxtLink>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n     <!-- Infinite Scroll Loader/Trigger -->\r\n     <div ref=\"scrollTrigger\" class=\"h-20 flex justify-center items-center mt-6\">\r\n        <LoadingSpinner v-if=\"loadingMore\" class=\"w-6 h-6 text-primary\" />\r\n        <span v-else-if=\"!hasMoreAttempts && attempts.length > 0 && !pending\" class=\"text-sm text-gray-500 dark:text-gray-400\">وصلت إلى نهاية القائمة.</span>\r\n     </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, watch, shallowRef, onUnmounted, nextTick } from 'vue';\r\nimport { useSupabaseClient, definePageMeta, useHead, useRouter, useRoute } from '#imports';\r\nimport type { Database, Tables, Enums } from '~/types/database.types';\r\nimport LoadingSpinner from '~/components/LoadingSpinner.vue';\r\nimport { debounce } from 'lodash-es';\r\n\r\n// --- تعريف الأنواع ---\r\ntype AttemptGradingStatus = Enums<'grading_status_enum'>; // No longer null, use null for 'All' filter\r\ntype AttemptWithRelations = Tables<'quiz_attempts'> & {\r\n  quizzes: Pick<Tables<'quizzes'>, 'title'> | null;\r\n  profiles: Pick<Tables<'profiles'>, 'full_name' | 'id'> | null; // Include id for fallback display\r\n};\r\ntype QuizBasicInfo = Pick<Tables<'quizzes'>, 'id' | 'title'>;\r\ntype StudentBasicInfo = Pick<Tables<'profiles'>, 'id' | 'full_name'>;\r\ntype CourseBasicInfo = Pick<Tables<'study_courses'>, 'id' | 'title'>;\r\n\r\n// --- حماية الصفحة ---\r\ndefinePageMeta({\r\n  layout: 'admin',\r\n  middleware: ['auth', 'admin'] // Ensure auth middleware is also applied if needed\r\n});\r\n\r\n// --- إعدادات ---\r\nconst supabase = useSupabaseClient<Database>();\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst ITEMS_PER_PAGE = 25; // Increased slightly\r\nconst DEFAULT_STATUS_FILTER: AttemptGradingStatus = 'pending_manual';\r\n\r\n// --- حالة الفلاتر ---\r\n// Initialize filters from URL query or use defaults\r\nconst selectedStatus = ref<AttemptGradingStatus | null>(route.query.status as AttemptGradingStatus || DEFAULT_STATUS_FILTER);\r\nconst selectedCourseId = ref<number | null>(route.query.courseId ? Number(route.query.courseId) : null);\r\nconst selectedQuizId = ref<number | null>(route.query.quizId ? Number(route.query.quizId) : null);\r\nconst selectedStudentId = ref<string | null>(route.query.studentId as string || null);\r\nconst selectedStudentName = ref<string | null>(null); // To display the name of the selected student\r\nconst studentSearchTerm = ref(''); // Student search input model\r\nconst showStudentDropdown = ref(false);\r\n\r\n// --- حالة جلب بيانات الفلاتر ---\r\nconst coursesList = ref<CourseBasicInfo[]>([]);\r\nconst quizzesListBasedOnCourse = ref<QuizBasicInfo[]>([]);\r\nconst filteredStudentsList = ref<StudentBasicInfo[]>([]);\r\nconst loadingCourses = ref(false);\r\nconst loadingQuizzes = ref(false);\r\nconst loadingStudents = ref(false);\r\n\r\n// --- حالة بيانات المحاولات و Infinite Scroll ---\r\nconst attempts = shallowRef<AttemptWithRelations[]>([]); // shallowRef for performance with large lists\r\nconst currentPage = ref(0);\r\nconst loadingMore = ref(false);\r\nconst hasMoreAttempts = ref(true);\r\nconst pending = ref(false); // General loading state (initial load or filter change)\r\nconst error = ref<Error | null>(null);\r\nconst scrollTrigger = ref<HTMLElement | null>(null);\r\nlet observer: IntersectionObserver | null = null;\r\n\r\n// --- دوال جلب بيانات الفلاتر ---\r\nconst fetchCourses = async () => {\r\n  loadingCourses.value = true;\r\n  try {\r\n    const { data, error: fetchError } = await supabase\r\n      .from('study_courses')\r\n      .select('id, title')\r\n      .order('title');\r\n    if (fetchError) throw fetchError;\r\n    coursesList.value = data ?? [];\r\n  } catch (err: any) {\r\n    console.error(\"Error fetching courses list:\", err.message);\r\n    // Optionally: show a notification to the user\r\n  } finally {\r\n    loadingCourses.value = false;\r\n  }\r\n};\r\n\r\nconst fetchQuizzesForCourse = async (courseId: number | null) => {\r\n    quizzesListBasedOnCourse.value = []; // Clear current list\r\n    selectedQuizId.value = null; // Reset selected quiz when course changes\r\n\r\n    if (!courseId) {\r\n        // No need to fetch if no course is selected\r\n        return;\r\n    }\r\n\r\n    loadingQuizzes.value = true;\r\n    try {\r\n        const { data, error: fetchError } = await supabase\r\n            .from('quizzes')\r\n            .select('id, title')\r\n            .eq('course_id', courseId)\r\n            .order('title');\r\n        if (fetchError) throw fetchError;\r\n        quizzesListBasedOnCourse.value = data ?? [];\r\n    } catch (err: any) {\r\n        console.error(`Error fetching quizzes for course ${courseId}:`, err.message);\r\n    } finally {\r\n        loadingQuizzes.value = false;\r\n    }\r\n};\r\n\r\n// Fetch students based on search term (debounced)\r\nconst fetchStudentsDebounced = async (searchTerm: string) => {\r\n  if (!searchTerm || searchTerm.trim().length < 2) {\r\n    filteredStudentsList.value = [];\r\n    loadingStudents.value = false; // Ensure loading stops if search term is too short\r\n    return;\r\n  }\r\n  loadingStudents.value = true;\r\n  // console.log(`Searching for students like: ${searchTerm.trim()}`);\r\n  try {\r\n      const { data, error: fetchError } = await supabase\r\n        .from('profiles')\r\n        .select('id, full_name')\r\n        // Using textSearch for potentially better relevance across multiple fields if needed later\r\n        // .textSearch('fts', `${searchTerm.trim()}:*`, { type: 'websearch', config: 'arabic' }) // Adjust based on your FTS setup\r\n        .ilike('full_name', `%${searchTerm.trim()}%`) // Simple ILIKE for now\r\n        .limit(15); // Limit results\r\n\r\n      if (fetchError) throw fetchError;\r\n      filteredStudentsList.value = data ?? [];\r\n  } catch(err: any) {\r\n      console.error(\"Error searching students:\", err.message);\r\n      filteredStudentsList.value = []; // Clear results on error\r\n  } finally {\r\n      loadingStudents.value = false;\r\n  }\r\n};\r\nconst debouncedFetchStudents = debounce(() => fetchStudentsDebounced(studentSearchTerm.value), 350);\r\n\r\n// Fetch student name if selectedStudentId is set from URL on initial load\r\nconst fetchSelectedStudentName = async (studentId: string) => {\r\n    if (!studentId || selectedStudentName.value) return; // Don't fetch if no ID or name already exists\r\n    try {\r\n        const { data, error: fetchError } = await supabase\r\n            .from('profiles')\r\n            .select('full_name')\r\n            .eq('id', studentId)\r\n            .maybeSingle();\r\n        if (fetchError) throw fetchError;\r\n        if (data) {\r\n            selectedStudentName.value = data.full_name;\r\n            // Optionally set search term to match, if desired UX\r\n            // studentSearchTerm.value = data.full_name;\r\n        } else {\r\n             console.warn(`Profile not found for initial studentId: ${studentId}`);\r\n             // Keep selectedStudentId but name remains null (fallback display will be used)\r\n             selectedStudentId.value = null; // Or clear the ID if profile must exist\r\n             updateUrlQuery(); // Update URL if we clear the ID\r\n        }\r\n    } catch (err: any) {\r\n        console.error(\"Error fetching selected student name:\", err.message);\r\n    }\r\n};\r\n\r\n\r\n// --- دالة جلب المحاولات الرئيسية (مع Infinite Scroll) ---\r\nconst loadAttempts = async (reset: boolean = false) => {\r\n    if (reset) {\r\n        pending.value = true;\r\n        error.value = null;\r\n        currentPage.value = 0;\r\n        attempts.value = [];\r\n        hasMoreAttempts.value = true; // Assume more until first fetch proves otherwise\r\n        // Ensure scroll trigger is observed again if needed\r\n        await nextTick(); // Allow DOM updates before possibly re-observing\r\n        setupIntersectionObserver();\r\n    }\r\n\r\n    if (loadingMore.value || !hasMoreAttempts.value || (pending.value && !reset)) return; // Prevent concurrent loads or loading when already pending initial/reset\r\n\r\n    if (!reset) {\r\n        loadingMore.value = true; // Loading *more* items\r\n    }\r\n    // `pending` is handled by the reset block\r\n\r\n    const pageToFetch = currentPage.value;\r\n    const rangeFrom = pageToFetch * ITEMS_PER_PAGE;\r\n    const rangeTo = rangeFrom + ITEMS_PER_PAGE - 1;\r\n\r\n    // console.log(`Loading attempts page ${pageToFetch + 1} (Range: ${rangeFrom}-${rangeTo}) with filters:`, { status: selectedStatus.value, course: selectedCourseId.value, quiz: selectedQuizId.value, student: selectedStudentId.value });\r\n\r\n    try {\r\n        let query = supabase\r\n            .from('quiz_attempts')\r\n            .select(`\r\n                id,\r\n                user_id,\r\n                quiz_id,\r\n                submitted_at,\r\n                grading_status,\r\n                quizzes ( title ),\r\n                profiles ( id, full_name )\r\n            `)\r\n            .order('submitted_at', { ascending: false })\r\n            .range(rangeFrom, rangeTo);\r\n\r\n        // Apply filters\r\n        if (selectedStatus.value) query = query.eq('grading_status', selectedStatus.value);\r\n        // If a specific quiz is selected, filter by it.\r\n        if (selectedQuizId.value) {\r\n            query = query.eq('quiz_id', selectedQuizId.value);\r\n        }\r\n        // If a course is selected BUT no specific quiz, filter by course (indirectly via quizzes in that course)\r\n        // Note: This requires a join or a subquery which might be complex/inefficient.\r\n        // A simpler approach is to fetch quizzes for the course first and then filter by quiz IDs if needed,\r\n        // but the current structure filters directly by quiz_id if selected, which is fine.\r\n        // Filtering attempts directly by course_id would require joining quiz_attempts -> quizzes.\r\n        // Let's keep it simple: if course is selected but quiz is not, we *don't* filter by course here directly,\r\n        // as the user hasn't chosen a specific quiz within that course yet. The quiz dropdown handles the context.\r\n        if (selectedStudentId.value) query = query.eq('user_id', selectedStudentId.value);\r\n\r\n        const { data, error: fetchError } = await query;\r\n\r\n        if (fetchError) throw fetchError;\r\n\r\n        const newAttempts = data ?? [];\r\n        // console.log(`Fetched ${newAttempts.length} new attempts.`);\r\n\r\n        // Use shallowRef correctly by replacing the array\r\n        attempts.value = reset ? newAttempts : [...attempts.value, ...newAttempts];\r\n\r\n        hasMoreAttempts.value = newAttempts.length === ITEMS_PER_PAGE;\r\n        currentPage.value += 1;\r\n\r\n    } catch (err: any) {\r\n        console.error(\"Error loading attempts:\", err);\r\n        error.value = err;\r\n        hasMoreAttempts.value = false; // Stop trying on error\r\n    } finally {\r\n        loadingMore.value = false;\r\n        if (reset) {\r\n            pending.value = false; // Stop general pending state after reset is complete\r\n        }\r\n    }\r\n};\r\n\r\n// --- مراقبة التمرير (Intersection Observer) ---\r\nconst setupIntersectionObserver = () => {\r\n  if (observer) observer.disconnect();\r\n\r\n  const options = {\r\n    rootMargin: '0px 0px 300px 0px', // Load somewhat before element enters viewport\r\n    threshold: 0\r\n  };\r\n\r\n  observer = new IntersectionObserver((entries) => {\r\n    const entry = entries[0];\r\n    if (entry.isIntersecting && !loadingMore.value && hasMoreAttempts.value && !pending.value) {\r\n        // console.log(\"Scroll trigger intersected, loading more attempts...\");\r\n        loadAttempts(); // Load next page\r\n    }\r\n  }, options);\r\n\r\n  if (scrollTrigger.value) {\r\n    observer.observe(scrollTrigger.value);\r\n  } else {\r\n      // console.warn(\"Scroll trigger element not found for IntersectionObserver.\");\r\n  }\r\n};\r\n\r\n// --- تحميل البيانات الأولية وإعداد المراقب ---\r\nonMounted(async () => {\r\n    pending.value = true; // Set initial pending state\r\n    await fetchCourses();\r\n    // If courseId is pre-selected from URL, fetch its quizzes\r\n    if (selectedCourseId.value) {\r\n        await fetchQuizzesForCourse(selectedCourseId.value);\r\n        // Ensure selectedQuizId from URL is valid for the fetched quizzes\r\n        if (selectedQuizId.value && !quizzesListBasedOnCourse.value.some(q => q.id === selectedQuizId.value)) {\r\n            console.warn(\"Initial quizId from URL is not valid for the selected course. Resetting quiz filter.\");\r\n            selectedQuizId.value = null;\r\n            updateUrlQuery(); // Remove invalid quizId from URL\r\n        }\r\n    }\r\n    // If studentId is pre-selected from URL, fetch their name for display\r\n    if (selectedStudentId.value) {\r\n        await fetchSelectedStudentName(selectedStudentId.value);\r\n    }\r\n    // Load initial attempts based on resolved filters\r\n    await loadAttempts(true);\r\n    // Setup observer after initial load attempt\r\n    nextTick(() => {\r\n        setupIntersectionObserver();\r\n    });\r\n});\r\n\r\n// --- تنظيف المراقب عند مغادرة الصفحة ---\r\nonUnmounted(() => {\r\n  if (observer) {\r\n    observer.disconnect();\r\n    observer = null;\r\n  }\r\n});\r\n\r\n// --- دوال مساعدة للتنسيق والعرض ---\r\nconst formatDate = (dateString: string | null): string => {\r\n  if (!dateString) return 'N/A';\r\n  try {\r\n    return new Date(dateString).toLocaleString('ar-EG', { // Example locale\r\n      dateStyle: 'medium',\r\n      timeStyle: 'short',\r\n    });\r\n  } catch (e) {\r\n    console.error(\"Error formatting date:\", e);\r\n    return dateString; // Fallback to original string\r\n  }\r\n};\r\n\r\nconst getGradingStatusText = (status: AttemptGradingStatus | null | undefined): string => {\r\n  switch (status) {\r\n    case 'pending_manual': return 'يحتاج تصحيح يدوي';\r\n    case 'graded': return 'تم تصحيحه';\r\n    case 'auto_graded': return 'تم تصحيحه آلياً';\r\n    case 'pending': return 'قيد المراجعة (آلي)';\r\n    default: return 'غير معروف';\r\n  }\r\n};\r\n\r\nconst getStatusBadgeClass = (status: AttemptGradingStatus | null | undefined): string => {\r\n  const baseClass = 'px-2.5 py-0.5 rounded-full text-xs font-medium inline-block';\r\n  switch (status) {\r\n    case 'pending_manual': return `${baseClass} bg-yellow-100 text-yellow-800 dark:bg-yellow-900/70 dark:text-yellow-200`;\r\n    case 'graded': return `${baseClass} bg-green-100 text-green-800 dark:bg-green-900/70 dark:text-green-200`;\r\n    case 'auto_graded': return `${baseClass} bg-blue-100 text-blue-800 dark:bg-blue-900/70 dark:text-blue-200`;\r\n    case 'pending': return `${baseClass} bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300`;\r\n    default: return `${baseClass} bg-gray-200 text-gray-500 dark:bg-gray-600 dark:text-gray-400`;\r\n  }\r\n};\r\n\r\n// --- دوال التعامل مع الفلاتر ---\r\nconst handleFilterChange = () => {\r\n    updateUrlQuery();\r\n    loadAttempts(true); // Reset and load with new filters\r\n};\r\n\r\nconst handleCourseChange = async () => {\r\n    // Reset quiz and fetch new ones *before* applying filters\r\n    selectedQuizId.value = null;\r\n    await fetchQuizzesForCourse(selectedCourseId.value);\r\n    handleFilterChange(); // Now trigger the attempt reload\r\n};\r\n\r\nconst selectStudent = (student: StudentBasicInfo) => {\r\n    selectedStudentId.value = student.id;\r\n    selectedStudentName.value = student.full_name;\r\n    studentSearchTerm.value = student.full_name; // Update search bar to reflect selection\r\n    showStudentDropdown.value = false;\r\n    filteredStudentsList.value = []; // Clear search results\r\n    handleFilterChange();\r\n};\r\n\r\nconst clearStudentSelection = () => {\r\n    selectedStudentId.value = null;\r\n    selectedStudentName.value = null;\r\n    studentSearchTerm.value = '';\r\n    filteredStudentsList.value = [];\r\n    showStudentDropdown.value = false; // Ensure dropdown is hidden\r\n    handleFilterChange();\r\n};\r\n\r\n// Close dropdown on blur, but delay to allow click/mousedown on options\r\nconst handleStudentSearchBlur = () => {\r\n    setTimeout(() => {\r\n        // Only hide if a student wasn't just selected (which would also hide it)\r\n        if (!selectedStudentId.value || studentSearchTerm.value !== selectedStudentName.value) {\r\n             showStudentDropdown.value = false;\r\n             // Optional: if search term doesn't match a selected student, clear the selection?\r\n             // if (selectedStudentId.value && studentSearchTerm.value !== selectedStudentName.value) {\r\n             //    clearStudentSelection();\r\n             // }\r\n        }\r\n         // If the search term is empty after blur, ensure selection is cleared\r\n         if(studentSearchTerm.value.trim() === '' && selectedStudentId.value) {\r\n             clearStudentSelection();\r\n         }\r\n    }, 200); // Adjust delay if needed\r\n};\r\n\r\nconst resetFilters = () => {\r\n    selectedStatus.value = DEFAULT_STATUS_FILTER;\r\n    selectedCourseId.value = null;\r\n    selectedQuizId.value = null;\r\n    quizzesListBasedOnCourse.value = []; // Clear dependent quiz list\r\n    clearStudentSelection(); // Use the dedicated clear function\r\n    updateUrlQuery(); // Update URL to reflect reset state\r\n    loadAttempts(true); // Reload data\r\n};\r\n\r\n// Computed property to check if any filter is active (different from default/null)\r\nconst hasActiveFilters = computed(() => {\r\n    return selectedStatus.value !== DEFAULT_STATUS_FILTER\r\n        || selectedCourseId.value !== null\r\n        || selectedQuizId.value !== null\r\n        || selectedStudentId.value !== null;\r\n});\r\n\r\n// Function to update URL query parameters based on current filters\r\nconst updateUrlQuery = () => {\r\n     router.replace({\r\n        query: {\r\n            // Only include non-default/non-null values in the query\r\n            status: selectedStatus.value === DEFAULT_STATUS_FILTER ? undefined : selectedStatus.value || undefined,\r\n            courseId: selectedCourseId.value || undefined,\r\n            quizId: selectedQuizId.value || undefined,\r\n            studentId: selectedStudentId.value || undefined,\r\n        }\r\n    }).catch(err => {\r\n        // Handle navigation errors if necessary (e.g., NavigationDuplicated)\r\n        if (err.name !== 'NavigationDuplicated') {\r\n            console.error('Router navigation error:', err);\r\n        }\r\n    });\r\n}\r\n\r\n// Watch for route query changes (e.g., browser back/forward) and update filters\r\n// Note: This might cause double loading if not careful.\r\n// Let's rely on onMounted for initial load and manual triggers for changes for now.\r\n// watch(() => route.query, (newQuery) => {\r\n//   selectedStatus.value = newQuery.status as AttemptGradingStatus || DEFAULT_STATUS_FILTER;\r\n//   selectedCourseId.value = newQuery.courseId ? Number(newQuery.courseId) : null;\r\n//   selectedQuizId.value = newQuery.quizId ? Number(newQuery.quizId) : null;\r\n//   selectedStudentId.value = newQuery.studentId as string || null;\r\n//   // Potentially fetch data if query changes externally? Be cautious of loops.\r\n// }, { deep: true });\r\n\r\n// --- Meta ---\r\nuseHead({ title: 'تصحيح الاختبارات - لوحة التحكم' });\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.error-box {\r\n  @apply p-4 border border-red-300 bg-red-50 text-red-700 rounded-md dark:bg-red-900/30 dark:border-red-700/50 dark:text-red-300;\r\n}\r\n.button-secondary {\r\n  @apply inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-150;\r\n}\r\n/* No button-primary needed in this specific view */\r\n.input-field {\r\n   @apply shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-900 dark:text-gray-100 dark:placeholder-gray-500 disabled:opacity-60 disabled:cursor-not-allowed;\r\n}\r\n.text-xxs {\r\n    font-size: 0.68rem; /* Slightly larger for readability */\r\n    line-height: 0.9rem;\r\n}\r\n/* Ensure consistent focus rings */\r\nselect.input-field:focus,\r\ninput[type=\"text\"].input-field:focus {\r\n     @apply ring-1 ring-primary-500 border-primary-500;\r\n}\r\n</style>"],"version":3}