{"version":3,"file":"index.vue2.mjs","sources":["../../../../../../../pages/study/courses/[courseId]/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mx-auto px-4 py-8 md:py-12\">\r\n\r\n    <!-- 1. Loading State -->\r\n    <div v-if=\"pending\" class=\"text-center py-20\">\r\n      <LoadingSpinner class=\"w-12 h-12 mx-auto text-primary\" />\r\n      <p class=\"mt-4 text-base text-gray-600 dark:text-gray-400\">جارٍ تحميل تفاصيل الدورة...</p>\r\n    </div>\r\n\r\n    <!-- 2. Error or Not Found State -->\r\n     <div v-else-if=\"error || !course\" class=\"text-center py-10 px-6 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700/50 rounded-lg max-w-lg mx-auto shadow-md\">\r\n         <div class=\"flex justify-center items-center text-red-600 dark:text-red-400 mb-4\">\r\n             <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-7 h-7\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 1 1-16 0 8 8 0 0 1 16 0Zm-8-5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-1.5 0v-4.5A.75.75 0 0 1 10 5Zm0 10a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\" clip-rule=\"evenodd\" /></svg>\r\n             <h2 class=\"text-xl font-semibold ms-2\">\r\n                 {{ error?.statusCode === 404 || !course ? 'الدورة غير متاحة' : (error?.data?.statusMessage || error?.message || 'حدث خطأ') }}\r\n             </h2>\r\n         </div>\r\n        <p class=\"text-sm text-red-700 dark:text-red-300 mb-5\">\r\n             {{ error?.data?.message || error?.message || 'لم نتمكن من العثور على الدورة المطلوبة أو حدث خطأ غير متوقع أثناء تحميلها.' }}\r\n        </p>\r\n        <NuxtLink to=\"/study\" class=\"button-secondary border-red-300 dark:border-red-600 text-red-700 dark:text-red-200 bg-red-100 dark:bg-red-800/60 hover:bg-red-200 dark:hover:bg-red-700/70 focus:ring-red-500 inline-flex items-center gap-1.5\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-5 h-5 ms-1\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16Zm3.25-7.25a.75.75 0 0 0 0-1.5H8.66l2.1-1.95a.75.75 0 1 0-1.02-1.1l-3.5 3.25a.75.75 0 0 0 0 1.1l3.5 3.25a.75.75 0 0 0 1.02-1.1l-2.1-1.95h4.59Z\" clip-rule=\"evenodd\" /></svg>\r\n            <span>العودة لقائمة الدورات</span>\r\n        </NuxtLink>\r\n     </div>\r\n\r\n    <!-- 3. Course Details - Success State -->\r\n    <div v-else-if=\"!pending && course\" class=\"course-details space-y-8 md:space-y-12\">\r\n       <!-- Header Section -->\r\n       <header class=\"md:flex md:items-start md:gap-8 p-4 sm:p-6 md:p-8 bg-gradient-to-b from-gray-50 to-white dark:from-gray-800/50 dark:to-gray-900 rounded-lg shadow-sm border dark:border-gray-700/50\">\r\n          <!-- Course Image -->\r\n          <div class=\"w-full md:w-1/3 lg:w-1/4 flex-shrink-0 mb-4 md:mb-0\">\r\n             <img :src=\"getCourseImageUrl(course.image_url)\" :alt=\"`غلاف دورة: ${course.title}`\" class=\"w-full aspect-video object-cover rounded-lg shadow-md\">\r\n          </div>\r\n          <!-- Course Info & Actions -->\r\n          <div class=\"flex-grow\">\r\n             <h1 class=\"text-3xl font-bold text-brown-dark dark:text-beige-light mb-3\">{{ course.title }}</h1>\r\n             <p v-if=\"categoryName\" class=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">\r\n                الفئة: <span class=\"font-medium text-gray-700 dark:text-gray-300\">{{ categoryName }}</span>\r\n             </p>\r\n             <p v-if=\"course.description\" class=\"text-gray-700 dark:text-gray-300 mb-5 leading-relaxed\">{{ course.description }}</p>\r\n\r\n             <ClientOnly>\r\n                 <div class=\"space-y-4\">\r\n                     <!-- Enrollment Section -->\r\n                     <div v-if=\"isLoggedIn\">\r\n                         <!-- Not Enrolled -->\r\n                         <button v-if=\"!isEnrolled\" @click=\"handleEnroll(course?.id)\" :disabled=\"enrollLoading\" class=\"button-enroll w-full sm:w-auto\">\r\n                              <span v-if=\"enrollLoading\">جاري الانتساب...</span><span v-else>انتسب الآن</span>\r\n                         </button>\r\n                         <!-- Enrolled -->\r\n                         <div v-else class=\"space-y-3 bg-green-50 dark:bg-green-900/20 p-4 rounded-md border border-green-200 dark:border-green-700/50\">\r\n                             <p class=\"text-green-700 dark:text-green-300 font-semibold text-base flex items-center\">\r\n                                 <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-5 h-5 me-1.5 flex-shrink-0\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16.403 12.652a3 3 0 0 0 0-5.304 3 3 0 0 0-3.75-3.751 3 3 0 0 0-5.305 0 3 3 0 0 0-3.751 3.75 3 3 0 0 0 0 5.305 3 3 0 0 0 3.75 3.751 3 3 0 0 0 5.305 0 3 3 0 0 0 3.751-3.75Zm-2.546-4.46a.75.75 0 0 0-1.214-.883l-3.48 4.774L6.52 10.91a.75.75 0 1 0-1.04 1.08l2.18 2.108a.75.75 0 0 0 1.076-.015l4.145-5.682Z\" clip-rule=\"evenodd\" /></svg>\r\n                                  أنت منتسب لهذه الدورة\r\n                             </p>\r\n                             <!-- Progress Bar Section -->\r\n                             <div v-if=\"totalLessonsCount > 0\" class=\"progress-section pt-2\">\r\n                                  <div class=\"flex justify-between mb-1 text-xs font-medium text-gray-600 dark:text-gray-400\">\r\n                                     <span>التقدم</span>\r\n                                     <span>{{ progressPercentage }}%</span>\r\n                                  </div>\r\n                                  <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 overflow-hidden\">\r\n                                     <div class=\"bg-primary h-2.5 rounded-full transition-all duration-500 ease-out\" :style=\"{ width: progressPercentage + '%' }\"></div>\r\n                                  </div>\r\n                                  <p class=\"text-xs text-gray-500 dark:text-gray-400 mt-1\"> {{ completedLessonsCount }} / {{ totalLessonsCount }} درس مكتمل</p>\r\n                             </div>\r\n                             <div v-else class=\"text-xs text-gray-500 dark:text-gray-400 italic pt-2\"> (لم تتم إضافة دروس لهذه الدورة بعد)</div>\r\n                             <!-- Actions -->\r\n                             <div class=\"flex items-center gap-4 pt-3 mt-2 border-t border-green-200 dark:border-green-700/50\">\r\n                                  <button @click=\"navigateToLastAccessed\" class=\"button-secondary flex-grow sm:flex-grow-0 text-sm\">\r\n                                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-4 h-4 me-1.5\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm6.39-2.908a.75.75 0 0 1 .766.027l3.5 2.25a.75.75 0 0 1 0 1.262l-3.5 2.25A.75.75 0 0 1 8 12.25v-4.5a.75.75 0 0 1 .39-.658Z\" clip-rule=\"evenodd\" /></svg>\r\n                                      استئناف التعلم\r\n                                  </button>\r\n                                  <button @click=\"handleUnenroll(course?.id)\" :disabled=\"enrollLoading\" class=\"text-xs text-red-500 hover:text-red-700 dark:hover:text-red-300 underline disabled:opacity-50 disabled:cursor-not-allowed\">إلغاء الانتساب</button>\r\n                             </div>\r\n                         </div>\r\n                     </div>\r\n                     <!-- Not Logged In -->\r\n                     <NuxtLink v-else :to=\"`/login?redirect=${route.fullPath}`\" class=\"button-enroll w-full sm:w-auto\">سجل الدخول للانتساب</NuxtLink>\r\n\r\n                     <!-- Course Level Quizzes Section -->\r\n                     <div v-if=\"isEnrolled && courseLevelQuizzes.length > 0\" class=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n                         <h3 class=\"text-sm font-semibold text-gray-600 dark:text-gray-400 mb-3\">الاختبارات النهائية للدورة:</h3>\r\n                         <div class=\"flex flex-wrap gap-2\">\r\n                             <button\r\n                                 v-for=\"quiz in courseLevelQuizzes\"\r\n                                 :key=\"quiz.id\"\r\n                                 @click=\"goToQuiz(quiz.id)\"\r\n                                 :class=\"['button-quiz-base button-quiz-course', { 'passed': hasPassedQuiz(quiz.id) }]\"\r\n                                 :title=\"hasPassedQuiz(quiz.id) ? `تم اجتياز الاختبار: ${quiz.title}` : quiz.title\"\r\n                                 :disabled=\"!canAttemptQuiz(quiz.id)\"\r\n                              >\r\n                                 <!-- *** QuizIcon REMOVED *** -->\r\n                                 {{ quiz.title || 'الاختبار النهائي' }}\r\n                                 <span v-if=\"hasPassedQuiz(quiz.id)\" class=\"ms-1.5 text-xxs opacity-80 text-green-100\">(تم الاجتياز - عرض النتيجة)</span>\r\n                             </button>\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n                 <template #fallback>\r\n                      <div class=\"h-10 bg-gray-200 dark:bg-gray-700 rounded-md animate-pulse w-full sm:w-40\"></div>\r\n                 </template>\r\n              </ClientOnly>\r\n          </div>\r\n       </header>\r\n\r\n       <!-- Course Content Section -->\r\n       <section class=\"course-content\">\r\n          <h2 class=\"text-2xl font-semibold text-brown-dark dark:text-beige-light mb-6\">محتوى الدورة</h2>\r\n          <!-- No Content -->\r\n          <div v-if=\"groupedContent.length === 0\" class=\"text-center py-10 text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800/30 rounded-lg border border-dashed dark:border-gray-700\">\r\n             <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-10 h-10 mx-auto mb-3 text-gray-400 dark:text-gray-500\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z\" /></svg>\r\n              سيتم إضافة محتوى لهذه الدورة قريبًا إن شاء الله.\r\n          </div>\r\n\r\n          <!-- Modules Loop -->\r\n          <div v-else class=\"space-y-6\">\r\n            <div v-for=\"moduleGroup in groupedContent\" :key=\"moduleGroup.moduleNumber ?? 'general'\" class=\"module-section bg-white dark:bg-gray-800/40 p-4 sm:p-5 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm\">\r\n                <!-- Module Header -->\r\n                <div class=\"module-header flex flex-wrap items-center justify-between gap-3 mb-4 pb-3 border-b border-gray-200 dark:border-gray-700\">\r\n                    <!-- Module Title -->\r\n                    <h3 class=\"text-lg font-semibold text-primary dark:text-primary-400\">\r\n                        <span v-if=\"moduleGroup.moduleNumber !== null\" class=\"font-mono me-1.5 text-sm opacity-80\">#{{ moduleGroup.moduleNumber }}</span>\r\n                        {{ moduleGroup.moduleTitle }}\r\n                    </h3>\r\n                    <!-- Module Level Quizzes Section -->\r\n                    <div v-if=\"isEnrolled && moduleGroup.quizzes.length > 0\" class=\"flex flex-wrap gap-2\">\r\n                       <button\r\n                           v-for=\"quiz in moduleGroup.quizzes\"\r\n                           :key=\"quiz.id\"\r\n                           @click=\"goToQuiz(quiz.id)\"\r\n                           :class=\"['button-quiz-base button-quiz-module', { 'passed': hasPassedQuiz(quiz.id) }]\"\r\n                           :title=\"hasPassedQuiz(quiz.id) ? `تم اجتياز الاختبار: ${quiz.title}` : quiz.title\"\r\n                           :disabled=\"!canAttemptQuiz(quiz.id)\"\r\n                       >\r\n                           <!-- *** QuizIcon REMOVED *** -->\r\n                            {{ quiz.title || `اختبار الوحدة ${moduleGroup.moduleNumber}` }}\r\n                            <span v-if=\"hasPassedQuiz(quiz.id)\" class=\"ms-1.5 text-xxs opacity-80 text-green-100\">(تم الاجتياز - عرض النتيجة)</span>\r\n                       </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Lessons List -->\r\n                <ul v-if=\"moduleGroup.lessons.length > 0\" class=\"space-y-2\">\r\n                    <!-- Lesson Loop -->\r\n                    <li v-for=\"(lesson, index) in moduleGroup.lessons\" :key=\"lesson.id\"\r\n                        :class=\"['flex flex-col sm:flex-row items-start sm:items-center justify-between p-3 rounded-md transition-colors duration-150 gap-2 sm:gap-4', isLessonCompleted(lesson.id) ? 'lesson-completed' : 'lesson-incomplete']\">\r\n                        <!-- Lesson Title and Status -->\r\n                        <div class=\"flex items-center space-x-3 rtl:space-x-reverse flex-grow min-w-0\">\r\n                            <span :class=\"['lesson-status-icon', isLessonCompleted(lesson.id) ? 'completed' : 'incomplete']\" aria-hidden=\"true\">\r\n                               <svg v-if=\"isLessonCompleted(lesson.id)\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" class=\"w-4 h-4\"><path fill-rule=\"evenodd\" d=\"M12.416 3.376a.75.75 0 0 1 .208 1.04l-5 7.5a.75.75 0 0 1-1.154.114l-3-3a.75.75 0 0 1 1.06-1.06l2.353 2.353 4.493-6.74a.75.75 0 0 1 1.04-.208Z\" clip-rule=\"evenodd\" /></svg>\r\n                               <span v-else class=\"font-mono\">{{ lesson.lesson_order ?? index + 1 }}</span>\r\n                            </span>\r\n                            <NuxtLink :to=\"lessonLink(lesson.id)\" class=\"lesson-title-link flex-1 min-w-0\">\r\n                                <span class=\"truncate\">{{ lesson.title }}</span>\r\n                            </NuxtLink>\r\n                        </div>\r\n                         <!-- Lesson Level Quizzes Section -->\r\n                         <div v-if=\"isEnrolled && lessonQuizzesMap.get(lesson.id) && lessonQuizzesMap.get(lesson.id)!.length > 0\" class=\"flex flex-wrap gap-1.5 mt-1 sm:mt-0 flex-shrink-0 w-full sm:w-auto justify-start sm:justify-end\">\r\n                            <button\r\n                                v-for=\"quiz in lessonQuizzesMap.get(lesson.id)\"\r\n                                :key=\"quiz.id\"\r\n                                @click=\"goToQuiz(quiz.id)\"\r\n                                :class=\"['button-quiz-base button-quiz-lesson', { 'passed': hasPassedQuiz(quiz.id) }]\"\r\n                                :title=\"hasPassedQuiz(quiz.id) ? `تم اجتياز الاختبار: ${quiz.title}` : quiz.title\"\r\n                                :disabled=\"!canAttemptQuiz(quiz.id)\"\r\n                            >\r\n                                <!-- *** QuizIcon REMOVED *** -->\r\n                                {{ quiz.title || 'اختبار الدرس' }}\r\n                                <span v-if=\"hasPassedQuiz(quiz.id)\" class=\"ms-1 text-xxs opacity-80 text-indigo-800 dark:text-indigo-300\">(تم الاجتياز - عرض النتيجة)</span>\r\n                            </button>\r\n                         </div>\r\n                         <!-- Placeholder to maintain alignment -->\r\n                         <div v-else class=\"h-[30px] flex-shrink-0 w-full sm:w-auto sm:min-w-[100px]\"></div>\r\n                    </li>\r\n                </ul>\r\n                 <!-- No lessons in module -->\r\n                 <p v-else class=\"text-sm text-gray-500 dark:text-gray-400 italic px-3 py-4 text-center\">لا توجد دروس في هذه الوحدة بعد.</p>\r\n            </div>\r\n          </div>\r\n       </section>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script setup lang=\"ts\">\r\n// --- استيراد الوحدات والمكونات اللازمة ---\r\nimport { ref, computed, watch, shallowRef } from 'vue'; // لاستخدام حالة التفاعل والحساب والمراقبة\r\nimport type { Database, Tables } from '~/types/database.types'; // أنواع قاعدة بيانات Supabase المنشأة\r\nimport { useSupabaseClient, useAsyncData, useRoute, useHead, navigateTo, createError, showError } from '#imports'; // وظائف Nuxt و Supabase\r\nimport LoadingSpinner from '~/components/LoadingSpinner.vue'; // مكون عرض التحميل\r\nimport { useUserStore } from '~/stores/user'; // مخزن Pinia لإدارة حالة المستخدم\r\nimport { storeToRefs } from 'pinia'; // لتحويل حالة المخزن إلى refs تفاعلية\r\n\r\n// --- تعريف الأنواع (Types) ---\r\n// أنواع مخصصة لتمثيل البيانات التي يتم جلبها والتعامل معها في الصفحة لزيادة الوضوح والأمان\r\n\r\n// نوع مركب يجمع بيانات الدورة مع العلاقات المرتبطة بها (الفئة، الوحدات، الدروس، الاختبارات)\r\n// يتم استخدامه بشكل أساسي لتحديد نوع البيانات المتوقع من الاستعلام الرئيسي في useAsyncData\r\ntype CourseWithDetails = Tables<'study_courses'> & {\r\n    category: Pick<Tables<'categories'>, 'name'> | null; // اسم الفئة فقط\r\n    modules: Array<Pick<Tables<'course_modules'>, 'id' | 'title' | 'module_number'>>; // معلومات أساسية للوحدات\r\n    lessons: Array<Pick<Tables<'lessons'>, 'id' | 'title' | 'lesson_order' | 'module_number' | 'created_at'>>; // معلومات أساسية للدروس\r\n    quizzes: Array<Pick<Tables<'quizzes'>, 'id' | 'title' | 'lesson_id' | 'module_number' | 'course_id' | 'is_active'>>; // معلومات أساسية للاختبارات\r\n};\r\n\r\n// أنواع قياسية لتمثيل الكيانات الفردية\r\ntype Course = Tables<'study_courses'>; // نوع الدورة الأساسي من الأنواع المنشأة\r\ntype Lesson = Pick<Tables<'lessons'>, 'id' | 'title' | 'lesson_order' | 'module_number' | 'created_at'>; // المعلومات الأساسية للدرس\r\ntype CourseModuleInfo = Pick<Tables<'course_modules'>, 'id' | 'title' | 'module_number'>; // المعلومات الأساسية للوحدة\r\ntype QuizInfo = Pick<Tables<'quizzes'>, 'id' | 'title' | 'lesson_id' | 'module_number' | 'course_id' | 'is_active'>; // المعلومات الأساسية للاختبار\r\ntype CourseEnrollment = Tables<'course_enrollments'>; // نوع سجل الانتساب\r\ntype LessonCompletionInfo = Pick<Tables<'lesson_completions'>, 'lesson_id'>; // معرف الدرس المكتمل فقط\r\ntype QuizAttemptInfo = Pick<Tables<'quiz_attempts'>, 'id' | 'quiz_id' | 'passed' | 'submitted_at'>; // معلومات أساسية عن محاولة الاختبار\r\n\r\n// نوع الهيكل الكامل للبيانات التي يتم إرجاعها من useAsyncData\r\ntype FetchedCoursePageData = {\r\n    course: Course | null;                 // بيانات الدورة الرئيسية\r\n    modules: CourseModuleInfo[];         // قائمة الوحدات\r\n    lessons: Lesson[];                   // قائمة الدروس\r\n    quizzes: QuizInfo[];                 // قائمة الاختبارات النشطة (للدورة، الوحدة، الدرس)\r\n    attempts: QuizAttemptInfo[];         // قائمة محاولات المستخدم للاختبارات في هذه الدورة\r\n    categoryName: string | null;         // اسم الفئة\r\n    enrollment: CourseEnrollment | null; // سجل انتساب المستخدم الحالي (إن وجد)\r\n    completions: LessonCompletionInfo[]; // قائمة الدروس المكتملة للمستخدم الحالي\r\n};\r\n\r\n// نوع يستخدم لتجميع المحتوى (دروس واختبارات) حسب الوحدة في القالب\r\ninterface ModuleGroup {\r\n  moduleNumber: number | null; // رقم الوحدة (أو null للدروس العامة)\r\n  moduleTitle: string;         // عنوان الوحدة\r\n  lessons: Lesson[];           // قائمة الدروس في هذه الوحدة\r\n  quizzes: QuizInfo[];         // قائمة اختبارات الوحدة (Module-level quizzes)\r\n}\r\n\r\n// --- إعدادات أولية ---\r\nconst supabase = useSupabaseClient<Database>(); // عميل Supabase للتفاعل مع قاعدة البيانات\r\nconst route = useRoute();                     // للوصول إلى معلمات المسار (مثل courseId)\r\nconst userStore = useUserStore();             // للوصول إلى حالة المستخدم\r\nconst { profile, isLoggedIn } = storeToRefs(userStore); // الحصول على بيانات المستخدم وحالة تسجيل الدخول كـ refs تفاعلية\r\n\r\n// --- الحصول على معرف الدورة والتحقق منه ---\r\nconst courseId = computed<number>(() => {\r\n    // يقرأ معلمة 'courseId' من عنوان URL\r\n    const id = parseInt(route.params.courseId as string, 10);\r\n    // يتحقق إذا كان الرقم صالحًا (ليس NaN وأكبر من 0)\r\n    if (isNaN(id) || id <= 0) {\r\n         // يعرض خطأ فادحًا إذا كان المعرف غير صالح ويوقف تحميل الصفحة\r\n         showError({ statusCode: 400, statusMessage: `معرف الدورة غير صالح: \"${route.params.courseId}\"`, fatal: true });\r\n         return NaN; // إرجاع NaN للإشارة إلى مشكلة\r\n    }\r\n    return id; // إرجاع المعرف الصحيح\r\n});\r\n\r\n// --- تعريف الحالة التفاعلية المحلية للصفحة ---\r\n// تُستخدم لتخزين البيانات التي تم جلبها وعرضها في القالب\r\nconst course = shallowRef<Course | null>(null); // بيانات الدورة الحالية (shallowRef لتحسين الأداء مع الكائنات الكبيرة)\r\nconst courseModulesData = shallowRef<CourseModuleInfo[]>([]); // قائمة بيانات الوحدات\r\nconst courseLessonsData = shallowRef<Lesson[]>([]);         // قائمة بيانات الدروس\r\nconst courseQuizzesData = shallowRef<QuizInfo[]>([]);         // قائمة بيانات الاختبارات\r\nconst userQuizAttempts = shallowRef<QuizAttemptInfo[]>([]);   // قائمة محاولات المستخدم\r\nconst categoryName = shallowRef<string | null>(null);        // اسم الفئة\r\nconst enrollment = shallowRef<CourseEnrollment | null>(null); // بيانات انتساب المستخدم\r\nconst completedLessonIds = shallowRef<number[]>([]);        // قائمة بمعرفات الدروس المكتملة\r\nconst enrollLoading = ref(false); // حالة التحميل لعمليات الانتساب/إلغاء الانتساب\r\n\r\n// --- إيقاف مؤقت للإعداد إذا كان معرف الدورة غير صالح ---\r\nif (isNaN(courseId.value)) {\r\n    console.error(\"Course ID is invalid, stopping component setup.\");\r\n    // قد تحتاج لإضافة حالة خطأ هنا إذا لم يكن showError كافيًا\r\n}\r\n\r\n// --- جلب البيانات باستخدام useAsyncData ---\r\n// هذه الوظيفة تجلب جميع البيانات اللازمة لعرض الصفحة بشكل غير متزامن.\r\n// يتم تخزين النتائج مؤقتًا (cache) بناءً على المفتاح الفريد.\r\nconst { data, pending, error, refresh } = await useAsyncData<FetchedCoursePageData>(\r\n    // مفتاح فريد لتخزين البيانات: يعتمد على معرف الدورة ومعرف المستخدم (للتحديث عند تسجيل الدخول/الخروج)\r\n    `course-page-data-${courseId.value}-${profile.value?.id ?? 'guest'}`,\r\n    // الدالة الفعلية التي تقوم بالجلب\r\n    async () => {\r\n        const currentCourseId = courseId.value;\r\n        if (isNaN(currentCourseId)) {\r\n             throw createError({ statusCode: 400, message: 'معرف الدورة غير صالح عند بدء الجلب.', fatal: true });\r\n        }\r\n        const currentUserId = profile.value?.id;\r\n        console.log(`[useAsyncData] Fetching data for course ${currentCourseId}, User ${currentUserId ?? 'Guest'}`);\r\n\r\n        try {\r\n            // --- الخطوة 1: جلب بيانات الدورة الرئيسية والعلاقات المباشرة (وحدات، دروس) ---\r\n            console.log(\"[useAsyncData] Fetching main course data, category, modules, lessons...\");\r\n            const { data: courseBaseData, error: courseFetchError } = await supabase\r\n                .from('study_courses')\r\n                .select(`\r\n                    *,\r\n                    category:categories ( name ),\r\n                    modules:course_modules!course_id ( id, title, module_number ),\r\n                    lessons:lessons!course_id ( id, title, lesson_order, module_number, created_at )\r\n                `)\r\n                .eq('id', currentCourseId)\r\n                .eq('is_active', true) // التأكد من أن الدورة نشطة\r\n                .single(); // توقع صف واحد فقط للدورة\r\n\r\n            if (courseFetchError) {\r\n                 console.error(\"[useAsyncData] Error fetching base course data:\", courseFetchError);\r\n                 throw createError({ statusCode: 500, statusMessage: `فشل جلب بيانات الدورة الرئيسية: ${courseFetchError.message}`, fatal: true });\r\n            }\r\n             if (!courseBaseData) {\r\n                console.warn(`[useAsyncData] Course ${currentCourseId} not found or inactive.`);\r\n                throw createError({ statusCode: 404, message: 'الدورة المطلوبة غير موجودة أو غير نشطة.', fatal: true });\r\n            }\r\n\r\n            // فصل البيانات التي تم جلبها\r\n            const fetchedCourse: Course = { ...courseBaseData, category: undefined, modules: undefined, lessons: undefined };\r\n            const fetchedModules = courseBaseData.modules?.sort((a, b) => (a.module_number ?? Infinity) - (b.module_number ?? Infinity)) ?? [];\r\n            const fetchedLessons = courseBaseData.lessons?.sort((a, b) => { /* ... (نفس منطق الترتيب السابق للدروس) ... */\r\n                const moduleCompare = (a.module_number ?? Infinity) - (b.module_number ?? Infinity);\r\n                if (moduleCompare !== 0) return moduleCompare;\r\n                const orderCompare = (a.lesson_order ?? Infinity) - (b.lesson_order ?? Infinity);\r\n                 if (orderCompare !== 0) return orderCompare;\r\n                return new Date(a.created_at ?? 0).getTime() - new Date(b.created_at ?? 0).getTime();\r\n             }) ?? [];\r\n            const fetchedCategoryName = courseBaseData.category?.name ?? null;\r\n            const lessonIds = fetchedLessons.map(l => l.id); // الحصول على معرفات الدروس لجلب اختباراتها\r\n\r\n            // --- الخطوة 2: جلب جميع الاختبارات النشطة المرتبطة (بالدورة مباشرة أو بدروسها) ---\r\n             console.log(\"[useAsyncData] Fetching course-level and lesson-level quizzes...\");\r\n            let fetchedQuizzes: QuizInfo[] = [];\r\n            // جلب اختبارات الدورة (module/final)\r\n            const { data: courseLinkedQuizzes, error: courseQuizError } = await supabase\r\n                .from('quizzes')\r\n                .select('id, title, lesson_id, module_number, course_id, is_active')\r\n                .eq('course_id', currentCourseId) // المرتبطة مباشرة بالدورة\r\n                .eq('is_active', true);\r\n\r\n            if (courseQuizError) console.error(\"Error fetching course-linked quizzes:\", courseQuizError.message);\r\n            else fetchedQuizzes = fetchedQuizzes.concat(courseLinkedQuizzes ?? []);\r\n\r\n            // جلب اختبارات الدروس (lesson)\r\n            if (lessonIds.length > 0) {\r\n                const { data: lessonLinkedQuizzes, error: lessonQuizError } = await supabase\r\n                    .from('quizzes')\r\n                    .select('id, title, lesson_id, module_number, course_id, is_active')\r\n                    .in('lesson_id', lessonIds) // المرتبطة بالدروس في هذه الدورة\r\n                    .eq('is_active', true);\r\n\r\n                if (lessonQuizError) console.error(\"Error fetching lesson-linked quizzes:\", lessonQuizError.message);\r\n                else fetchedQuizzes = fetchedQuizzes.concat(lessonLinkedQuizzes ?? []);\r\n            }\r\n            // إزالة التكرارات المحتملة (غير مرجح لكن آمن)\r\n            fetchedQuizzes = Array.from(new Map(fetchedQuizzes.map(q => [q.id, q])).values());\r\n             console.log(`[useAsyncData] Total active quizzes fetched: ${fetchedQuizzes.length}`);\r\n\r\n\r\n            // --- الخطوة 3: جلب البيانات الخاصة بالمستخدم (إذا كان مسجل الدخول) ---\r\n             console.log(\"[useAsyncData] Fetching user-specific data...\");\r\n            let fetchedEnrollment: CourseEnrollment | null = null;\r\n            let fetchedCompletions: LessonCompletionInfo[] = [];\r\n            let fetchedAttempts: QuizAttemptInfo[] = [];\r\n            const quizIds = fetchedQuizzes.map(q => q.id); // معرفات الاختبارات لجلب المحاولات\r\n\r\n            if (isLoggedIn.value && currentUserId) {\r\n                // تنفيذ الاستعلامات بشكل متوازي لتحسين الأداء\r\n                const [enrollmentRes, completionsRes, attemptsRes] = await Promise.all([\r\n                    supabase.from('course_enrollments').select('*').eq('user_id', currentUserId).eq('course_id', currentCourseId).maybeSingle(),\r\n                    lessonIds.length > 0 ? supabase.from('lesson_completions').select('lesson_id').eq('user_id', currentUserId).in('lesson_id', lessonIds) : Promise.resolve({ data: [], error: null }),\r\n                    quizIds.length > 0 ? supabase.from('quiz_attempts').select('id, quiz_id, passed, submitted_at').eq('user_id', currentUserId).in('quiz_id', quizIds) : Promise.resolve({ data: [], error: null })\r\n                ]);\r\n\r\n                // تسجيل الأخطاء دون إيقاف الجلب بالكامل\r\n                if (enrollmentRes.error) console.error(\"Enrollment fetch error:\", enrollmentRes.error.message); else fetchedEnrollment = enrollmentRes.data;\r\n                if (completionsRes.error) console.error(\"Completions fetch error:\", completionsRes.error.message); else fetchedCompletions = completionsRes.data ?? [];\r\n                if (attemptsRes.error) console.error(\"Attempts fetch error:\", attemptsRes.error.message); else fetchedAttempts = attemptsRes.data ?? [];\r\n                 console.log(`[useAsyncData] User data fetched. Enrolled: ${!!fetchedEnrollment}, Completions: ${fetchedCompletions.length}, Attempts: ${fetchedAttempts.length}`);\r\n            } else {\r\n                 console.log(\"[useAsyncData] User not logged in, skipping user-specific data fetch.\");\r\n            }\r\n\r\n            // --- الخطوة 4: إرجاع البيانات المجمعة ---\r\n             console.log(\"[useAsyncData] Fetch process complete.\");\r\n            return {\r\n                course: fetchedCourse,\r\n                modules: fetchedModules,\r\n                lessons: fetchedLessons,\r\n                quizzes: fetchedQuizzes, // القائمة المدمجة للاختبارات\r\n                categoryName: fetchedCategoryName,\r\n                enrollment: fetchedEnrollment,\r\n                completions: fetchedCompletions,\r\n                attempts: fetchedAttempts,\r\n            };\r\n\r\n        } catch (err: any) {\r\n             console.error(\"[useAsyncData] CRITICAL ERROR during data fetching:\", err);\r\n             if (err.statusCode && err.fatal) { throw err; } // إعادة رمي أخطاء createError\r\n             showError({ statusCode: err.statusCode || 500, message: `حدث خطأ غير متوقع أثناء تحميل بيانات الدورة: ${err.message || 'خطأ غير معروف'}`, fatal: true });\r\n             // إرجاع هيكل افتراضي فارغ في حالة الأخطاء غير المتوقعة\r\n             return { course: null, modules: [], lessons: [], quizzes: [], attempts: [], categoryName: null, enrollment: null, completions: [] };\r\n        }\r\n    }, {\r\n         // القيمة الافتراضية أثناء التحميل أو في حالة عدم وجود بيانات\r\n         default: (): FetchedCoursePageData => ({\r\n             course: null, modules: [], lessons: [], quizzes: [], attempts: [],\r\n             categoryName: null, enrollment: null, completions: []\r\n         }),\r\n         // إعادة الجلب عند تغير معرف المستخدم (تسجيل الدخول/الخروج)\r\n         watch: [() => profile.value?.id]\r\n    }\r\n);\r\n\r\n// --- مراقبة البيانات المجلوبة وتحديث الحالة المحلية ---\r\n// هذا الـ watcher يضمن تحديث الـ refs المحلية (مثل course, lessons, quizzes)\r\n// كلما تغيرت البيانات المجلوبة بواسطة useAsyncData (بما في ذلك بعد refresh).\r\n watch(data, (newData) => {\r\n    console.log(\"[Watcher] Updating local state from fetched data.\");\r\n    // تحديث كل ref بقيمته الجديدة أو القيمة الافتراضية إذا كانت null/undefined\r\n    course.value = newData?.course ?? null;\r\n    courseModulesData.value = Array.isArray(newData?.modules) ? newData.modules : [];\r\n    courseLessonsData.value = Array.isArray(newData?.lessons) ? newData.lessons : [];\r\n    courseQuizzesData.value = Array.isArray(newData?.quizzes) ? newData.quizzes : [];\r\n    userQuizAttempts.value = Array.isArray(newData?.attempts) ? newData.attempts : [];\r\n    categoryName.value = newData?.categoryName ?? null;\r\n    enrollment.value = newData?.enrollment ?? null;\r\n    completedLessonIds.value = Array.isArray(newData?.completions) ? newData.completions.map(c => c.lesson_id) : [];\r\n    console.log(\"[Watcher] Local state updated. Course:\", !!course.value, \"Lessons:\", courseLessonsData.value.length, \"Quizzes:\", courseQuizzesData.value.length);\r\n\r\n    // التعامل مع حالة عدم وجود بيانات بعد التحميل\r\n    if (!pending.value && !error.value && !newData?.course) {\r\n       console.warn(\"[Watcher] No course data found after loading.\");\r\n       // يمكنك هنا إظهار رسالة خطأ محلية إذا أردت\r\n    }\r\n\r\n }, { immediate: true }); // immediate: true يضمن التشغيل مرة واحدة فورًا عند تحميل المكون\r\n\r\n// --- الخصائص المحسوبة (Computed Properties) ---\r\n// تُستخدم لحساب قيم مشتقة من الحالة التفاعلية بطريقة فعالة\r\n\r\n// هل المستخدم منتسب لهذه الدورة؟\r\nconst isEnrolled = computed(() => !!enrollment.value);\r\n// إجمالي عدد الدروس في الدورة\r\nconst totalLessonsCount = computed(() => courseLessonsData.value.length);\r\n// عدد الدروس التي أكملها المستخدم\r\nconst completedLessonsCount = computed(() => completedLessonIds.value.length);\r\n// نسبة التقدم المئوية\r\nconst progressPercentage = computed(() => {\r\n  if (totalLessonsCount.value === 0) return 0; // تجنب القسمة على صفر\r\n  // التأكد من أن عدد الدروس المكتملة لا يتجاوز الإجمالي (احتياطي)\r\n  const validCompletedCount = Math.min(completedLessonsCount.value, totalLessonsCount.value);\r\n  return Math.round((validCompletedCount / totalLessonsCount.value) * 100);\r\n});\r\n\r\n// إنشاء خريطة (Map) لربط معرف الدرس بقائمة اختباراته لتسهيل الوصول في القالب\r\nconst lessonQuizzesMap = computed(() => {\r\n    const map = new Map<number, QuizInfo[]>();\r\n    // المرور على قائمة الاختبارات المجلوبة\r\n    for (const quiz of courseQuizzesData.value) {\r\n        // التحقق إذا كان الاختبار مرتبط بدرس (له lesson_id صالح)\r\n        if (quiz.lesson_id !== null && !isNaN(Number(quiz.lesson_id))) {\r\n             const lessonIdNumber = Number(quiz.lesson_id);\r\n             // إذا لم يكن هناك مدخل لهذا الدرس بعد، قم بإنشائه\r\n            if (!map.has(lessonIdNumber)) {\r\n                map.set(lessonIdNumber, []);\r\n            }\r\n            // أضف الاختبار إلى قائمة اختبارات هذا الدرس\r\n            map.get(lessonIdNumber)!.push(quiz);\r\n        }\r\n    }\r\n    // ترتيب الاختبارات داخل كل درس أبجديًا حسب العنوان (اختياري)\r\n    map.forEach(quizzes => quizzes.sort((a, b) => (a.title || '').localeCompare(b.title || '')));\r\n    return map; // إرجاع الخريطة النهائية\r\n});\r\n\r\n// تصفية الاختبارات التي ليس لها lesson_id أو module_number (اختبارات مستوى الدورة)\r\nconst courseLevelQuizzes = computed(() => {\r\n    return courseQuizzesData.value\r\n           .filter(q => q.lesson_id === null && q.module_number === null) // الشرط الأساسي\r\n           .sort((a, b) => (a.title || '').localeCompare(b.title || '')); // الترتيب الأبجدي\r\n});\r\n\r\n// تجميع المحتوى (الدروس واختبارات الوحدات) حسب الوحدة لعرضها بشكل منظم في القالب\r\nconst groupedContent = computed<ModuleGroup[]>(() => {\r\n    const modulesMap: Map<number | string, ModuleGroup> = new Map(); // خريطة لتخزين مجموعات الوحدات\r\n\r\n    // إضافة الوحدات المعرفة مسبقًا من courseModulesData إلى الخريطة\r\n    for (const moduleInfo of courseModulesData.value) {\r\n        if (moduleInfo.module_number !== null) {\r\n             modulesMap.set(moduleInfo.module_number, {\r\n                 moduleNumber: moduleInfo.module_number,\r\n                 moduleTitle: moduleInfo.title || `الوحدة ${moduleInfo.module_number}`, // عنوان الوحدة أو عنوان افتراضي\r\n                 lessons: [], // قائمة فارغة مبدئية للدروس\r\n                 quizzes: [], // قائمة فارغة مبدئية لاختبارات الوحدة\r\n             });\r\n        } else { console.warn(`Module ID ${moduleInfo.id} has null module_number.`); } // تحذير إذا كان رقم الوحدة غير موجود\r\n    }\r\n\r\n    // إضافة مجموعة افتراضية للدروس/الاختبارات التي ليس لها رقم وحدة\r\n    const generalGroupKey = 'general';\r\n    modulesMap.set(generalGroupKey, { moduleNumber: null, moduleTitle: 'دروس أو اختبارات عامة', lessons: [], quizzes: [] });\r\n\r\n    // توزيع الدروس على المجموعات الصحيحة بناءً على module_number\r\n    for (const lesson of courseLessonsData.value) {\r\n        const key = lesson.module_number !== null ? lesson.module_number : generalGroupKey; // تحديد المفتاح (رقم الوحدة أو 'general')\r\n        const group = modulesMap.get(key); // الحصول على المجموعة المناسبة من الخريطة\r\n        if (group) { group.lessons.push(lesson); } // إضافة الدرس للمجموعة\r\n        else { modulesMap.get(generalGroupKey)?.lessons.push(lesson); } // إذا لم توجد مجموعة، إضافته للمجموعة العامة كاحتياط\r\n    }\r\n\r\n    // توزيع اختبارات الوحدات (لها module_number ولكن lesson_id هو null)\r\n    for (const quiz of courseQuizzesData.value) {\r\n        if (quiz.module_number !== null && quiz.lesson_id === null) {\r\n             const group = modulesMap.get(quiz.module_number); // الحصول على مجموعة الوحدة\r\n             if (group) { group.quizzes.push(quiz); } // إضافة الاختبار للمجموعة\r\n             else { console.warn(`Module quiz ${quiz.id} (module ${quiz.module_number}) has no matching group.`); } // تحذير إذا لم توجد مجموعة\r\n        }\r\n    }\r\n    // ترتيب اختبارات الوحدات داخل كل مجموعة أبجديًا\r\n    modulesMap.forEach(group => group.quizzes.sort((a, b) => (a.title || '').localeCompare(b.title || '')));\r\n\r\n    // حذف المجموعة العامة إذا كانت فارغة (لا تحتوي على دروس أو اختبارات)\r\n    const generalGroup = modulesMap.get(generalGroupKey);\r\n    if (generalGroup && generalGroup.lessons.length === 0 && generalGroup.quizzes.length === 0) {\r\n        modulesMap.delete(generalGroupKey);\r\n    }\r\n\r\n    // تحويل الخريطة إلى مصفوفة وترتيب المجموعات (العامة أولاً، ثم حسب رقم الوحدة)\r\n    const sortedGroups = Array.from(modulesMap.values()).sort((a, b) => {\r\n        if (a.moduleNumber === null) return -1; // المجموعة العامة تأتي أولاً\r\n        if (b.moduleNumber === null) return 1;\r\n        return a.moduleNumber - b.moduleNumber; // ترتيب رقمي للوحدات الأخرى\r\n    });\r\n\r\n    return sortedGroups; // إرجاع المصفوفة المرتبة للمجموعات\r\n});\r\n\r\n // --- الدوال المساعدة (Helper Functions) ---\r\n\r\n// التحقق مما إذا كان الدرس قد اكتمل بواسطة المستخدم الحالي\r\nconst isLessonCompleted = (lessonId: number): boolean => completedLessonIds.value.includes(lessonId);\r\n\r\n// الحصول على رابط صورة الدورة أو صورة افتراضية\r\nconst getCourseImageUrl = (url: string | null): string => url || '/images/placeholder-course.jpg'; // استخدام placeholder إذا لم يتوفر رابط\r\n\r\n// إنشاء رابط لصفحة الدرس\r\nconst lessonLink = (lessonId: number | undefined): string => lessonId ? `/study/courses/${courseId.value}/lessons/${lessonId}` : '#'; // رابط آمن\r\n\r\n// التحقق مما إذا كان المستخدم قد اجتاز اختبارًا معينًا (بناءً على آخر محاولة)\r\nconst hasPassedQuiz = (quizId: number | bigint | undefined | null): boolean => {\r\n    if (!quizId || !isLoggedIn.value) return false; // لا يمكن التحقق بدون معرف اختبار أو تسجيل دخول\r\n    const numericQuizId = Number(quizId); // تحويل إلى رقم\r\n    // تصفية محاولات المستخدم لهذا الاختبار المحدد والتي تم إرسالها\r\n    const attemptsForQuiz = userQuizAttempts.value\r\n        .filter(att => att.quiz_id === numericQuizId && att.submitted_at !== null)\r\n        // ترتيب المحاولات حسب تاريخ الإرسال (الأحدث أولاً)\r\n        .sort((a, b) => new Date(b.submitted_at!).getTime() - new Date(a.submitted_at!).getTime());\r\n    // إرجاع true إذا كان هناك محاولات وكانت آخر محاولة ناجحة (passed = true)\r\n    return attemptsForQuiz.length > 0 && attemptsForQuiz[0].passed === true;\r\n};\r\n\r\n// التحقق المبدئي مما إذا كان بإمكان المستخدم محاولة إجراء الاختبار (مسجل ومنتسب)\r\nconst canAttemptQuiz = (quizId: number | bigint | undefined | null): boolean => {\r\n    // يمكن إضافة شروط أكثر تعقيدًا هنا لاحقًا (مثل عدد المحاولات، المتطلبات السابقة)\r\n    return isLoggedIn.value && isEnrolled.value;\r\n};\r\n\r\n// --- معالجات الأحداث (Event Handlers) ---\r\n\r\n// معالج حدث النقر على زر \"انتسب الآن\"\r\nconst handleEnroll = async (id: number | undefined | null) => {\r\n    const targetCourseId = Number(id); // التأكد من أنه رقم\r\n    // التحقق من الشروط الأساسية قبل المتابعة\r\n    if (!targetCourseId || !isLoggedIn.value || !profile.value?.id || isEnrolled.value || enrollLoading.value) return;\r\n    enrollLoading.value = true; // تفعيل حالة التحميل\r\n    try {\r\n      // إدخال سجل جديد في جدول الانتساب\r\n      const { data: newEnrollment, error: enrollError } = await supabase\r\n        .from('course_enrollments')\r\n        .insert({ user_id: profile.value.id, course_id: targetCourseId })\r\n        .select('*').single(); // طلب إرجاع السجل الجديد (اختياري)\r\n      if (enrollError) throw enrollError; // رمي الخطأ إذا حدث\r\n      await refresh(); // إعادة جلب جميع بيانات الصفحة لتحديث الواجهة (بما في ذلك حالة الانتساب والتقدم)\r\n      console.log('Enrollment successful!');\r\n      // TODO: استبدال alert بنظام إشعارات أفضل (toast)\r\n      // alert('تم الانتساب بنجاح!');\r\n    } catch (err:any) {\r\n        console.error(\"Enrollment error:\", err);\r\n        // TODO: إظهار رسالة خطأ للمستخدم\r\n        // alert(`فشل الانتساب: ${err.message}`);\r\n    } finally {\r\n        enrollLoading.value = false; // إلغاء تفعيل حالة التحميل دائمًا\r\n    }\r\n};\r\n\r\n// معالج حدث النقر على زر \"إلغاء الانتساب\"\r\nconst handleUnenroll = async (id: number | undefined | null) => {\r\n    const targetCourseId = Number(id); // التأكد من أنه رقم\r\n    // التحقق من الشروط الأساسية\r\n    if (!targetCourseId || !isEnrolled.value || !profile.value?.id || enrollLoading.value) return;\r\n    // طلب تأكيد من المستخدم قبل الحذف\r\n    if (!confirm('هل أنت متأكد من إلغاء الانتساب لهذه الدورة؟ سيتم حذف تقدمك المحفوظ المتعلق بهذه الدورة.')) return;\r\n    enrollLoading.value = true; // تفعيل حالة التحميل\r\n    try {\r\n      // حذف سجل الانتساب المطابق للمستخدم والدورة\r\n      const { error: unenrollError } = await supabase\r\n        .from('course_enrollments')\r\n        .delete()\r\n        .match({ user_id: profile.value.id, course_id: targetCourseId }); // شرط الحذف الدقيق\r\n      if (unenrollError) throw unenrollError; // رمي الخطأ إذا حدث\r\n      await refresh(); // إعادة جلب جميع بيانات الصفحة لتحديث الواجهة\r\n      console.log('Unenrollment successful!');\r\n      // TODO: استبدال alert بنظام إشعارات أفضل (toast)\r\n      // alert('تم إلغاء الانتساب.');\r\n    } catch (err:any) {\r\n        console.error(\"Unenrollment error:\", err);\r\n        // TODO: إظهار رسالة خطأ للمستخدم\r\n        // alert(`فشل إلغاء الانتساب: ${err.message}`);\r\n    } finally {\r\n        enrollLoading.value = false; // إلغاء تفعيل حالة التحميل دائمًا\r\n    }\r\n};\r\n\r\n// معالج حدث النقر على زر \"استئناف التعلم\"\r\nconst navigateToLastAccessed = () => {\r\n     const targetCourseId = courseId.value; // استخدام المعرف المحسوب\r\n    if (isNaN(targetCourseId) || !isEnrolled.value) return; // التحقق من الصلاحية والانتساب\r\n\r\n    // الحصول على معرف آخر درس تم الوصول إليه من بيانات الانتساب\r\n    const lastLessonId = enrollment.value?.last_accessed_lesson_id;\r\n    // الحصول على قائمة الدروس المرتبة\r\n    const lessons = courseLessonsData.value;\r\n    // الحصول على معرف أول درس في القائمة كاحتياط\r\n    const firstLessonId = lessons.length > 0 ? lessons[0]?.id : undefined;\r\n\r\n    // تحديد الدرس المستهدف: إما آخر درس تم الوصول إليه (إذا كان موجودًا وصالحًا) أو أول درس\r\n    const targetLessonId = lastLessonId && lessons.some(l => l.id === lastLessonId)\r\n                           ? lastLessonId\r\n                           : firstLessonId;\r\n\r\n    // الانتقال إلى صفحة الدرس المستهدف إذا تم تحديده\r\n    if (targetLessonId) {\r\n        navigateTo(lessonLink(targetLessonId)); // استخدام الدالة المساعدة لإنشاء الرابط\r\n    } else {\r\n        // إذا لم يتم العثور على أي دروس\r\n        console.warn(\"No lessons found to navigate to for last accessed/first lesson.\");\r\n        // TODO: إظهار إشعار للمستخدم\r\n        // alert('لا توجد دروس في هذه الدورة بعد.');\r\n    }\r\n};\r\n\r\n// معالج حدث النقر على زر اختبار (لأي مستوى)\r\nconst goToQuiz = (quizId: number | bigint | undefined | null) => {\r\n    if (!quizId) return; // التأكد من وجود معرف للاختبار\r\n    // الانتقال إلى صفحة الاختبار باستخدام المعرف\r\n    navigateTo(`/quizzes/${String(quizId)}`);\r\n};\r\n\r\n // --- تحديث معلومات الرأس (Meta Tags / Head) ---\r\n // يراقب تغير بيانات الدورة وحالة التحميل والخطأ لتحديث عنوان الصفحة ووصفها ديناميكيًا\r\n watch([course, pending, error], ([newCourse, loadingState, errorState]) => {\r\n     let pageTitle = 'تفاصيل الدورة'; // العنوان الافتراضي\r\n     let description = 'تصفح محتوى الدورة والدروس المتاحة.'; // الوصف الافتراضي\r\n\r\n     // تحديد العنوان والوصف بناءً على الحالة\r\n     if (loadingState) {\r\n         pageTitle = 'جارٍ تحميل الدورة...';\r\n         description = 'يتم الآن تحميل تفاصيل الدورة المطلوبة.';\r\n     } else if (errorState && errorState.statusCode === 404) { // خطأ 404 (غير موجود)\r\n         pageTitle = 'الدورة غير متاحة';\r\n         description = 'لم نتمكن من العثور على الدورة المطلوبة أو أنها غير نشطة حالياً.';\r\n     } else if (errorState) { // أي خطأ آخر\r\n         pageTitle = 'خطأ في تحميل الدورة';\r\n         description = `حدث خطأ أثناء تحميل بيانات الدورة: ${errorState.message}`;\r\n     } else if (newCourse) { // في حالة النجاح ووجود بيانات الدورة\r\n         pageTitle = `دورة: ${newCourse.title}`; // استخدام عنوان الدورة\r\n         // استخدام وصف الدورة (أو جزء منه) أو وصف افتراضي\r\n         description = newCourse.description?.substring(0, 160) || `تفاصيل ومحتوى دورة \"${newCourse.title}\".`;\r\n     }\r\n\r\n     // استخدام useHead لتحديث معلومات الرأس\r\n     useHead({\r\n         title: pageTitle, // تعيين عنوان الصفحة\r\n         meta: [\r\n            { name: 'description', content: description }, // تعيين وصف الصفحة\r\n            // إضافة علامات Open Graph لتحسين المشاركة على وسائل التواصل الاجتماعي (اختياري)\r\n             { property: 'og:title', content: pageTitle },\r\n             { property: 'og:description', content: description },\r\n             { property: 'og:type', content: 'website' },\r\n             // يمكنك إضافة og:image هنا إذا كان لديك رابط صورة الدورة\r\n             // { property: 'og:image', content: getCourseImageUrl(newCourse?.image_url ?? null) },\r\n         ]\r\n     });\r\n }, { immediate: true }); // immediate: true لتطبيق التحديث فورًا عند تحميل المكون\r\n\r\n</script>\r\n<style scoped>\r\n/* Styles from the original component */\r\n.button-primary {\r\n  @apply inline-flex items-center justify-center px-5 py-2.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-opacity-85 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-150;\r\n}\r\n.button-enroll { /* Alias for primary button */\r\n  @apply button-primary;\r\n}\r\n.button-secondary {\r\n  @apply inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-muted disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-150;\r\n}\r\n\r\n.button-quiz-base {\r\n    @apply inline-flex items-center justify-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-1 dark:focus:ring-offset-gray-800 disabled:opacity-60 disabled:cursor-not-allowed whitespace-nowrap transition-colors duration-150;\r\n    min-height: 30px; /* Ensure consistent height */\r\n}\r\n.button-quiz-course {\r\n    @apply button-quiz-base text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500;\r\n}\r\n.button-quiz-module {\r\n    @apply button-quiz-base text-white bg-teal-600 hover:bg-teal-700 focus:ring-teal-500;\r\n}\r\n.button-quiz-lesson {\r\n    @apply button-quiz-base text-indigo-700 dark:text-indigo-200 bg-indigo-100 dark:bg-indigo-900/50 hover:bg-indigo-200 dark:hover:bg-indigo-900/80 focus:ring-indigo-500 border border-indigo-200 dark:border-indigo-700/70;\r\n}\r\n\r\n/* Styling for passed quiz buttons */\r\n.button-quiz-base.passed {\r\n    @apply !bg-green-600 !text-white hover:!bg-green-700 focus:!ring-green-500 opacity-80 cursor-default pointer-events-none;\r\n}\r\n.button-quiz-lesson.passed {\r\n    /* Slightly different 'passed' style for lesson quizzes */\r\n    @apply !bg-green-100 dark:!bg-green-900/60 !text-green-700 dark:!text-green-300 !border-green-300 dark:!border-green-700/80 opacity-85;\r\n}\r\n\r\n/* Lesson item styling */\r\n.lesson-completed { @apply bg-green-50 dark:bg-green-900/30 opacity-85 hover:opacity-95; }\r\n.lesson-incomplete { @apply hover:bg-gray-50 dark:hover:bg-gray-700/50; }\r\n\r\n/* Lesson status icon (circle with number or checkmark) */\r\n.lesson-status-icon {\r\n    @apply flex items-center justify-center flex-shrink-0 w-6 h-6 text-xs font-semibold rounded-full;\r\n}\r\n.lesson-status-icon.completed {\r\n    @apply bg-green-200 dark:bg-green-700 text-green-800 dark:text-green-100;\r\n}\r\n.lesson-status-icon.incomplete {\r\n    @apply bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300;\r\n}\r\n.lesson-status-icon svg {\r\n    @apply w-4 h-4; /* Ensure checkmark fits */\r\n}\r\n\r\n/* Lesson title link styling */\r\n.lesson-title-link {\r\n    @apply text-base text-gray-800 dark:text-gray-200\r\n           hover:text-[var(--text-primary-hover-light)]\r\n           dark:hover:text-[var(--text-primary-hover-dark)]\r\n           truncate transition-colors duration-150;\r\n}\r\n\r\n/* Tiny text utility */\r\n.text-xxs {\r\n    font-size: 0.65rem; /* ~10.4px */\r\n    line-height: 0.8rem; /* ~12.8px */\r\n}\r\n\r\n/* Ensure progress bar transition */\r\n.progress-section .bg-primary {\r\n    transition: width 0.5s ease-out;\r\n}\r\n/* Improve focus visibility (example) */\r\nbutton:focus-visible, a:focus-visible {\r\n  outline: 2px solid var(--color-primary);\r\n  outline-offset: 2px;\r\n}\r\n</style>"],"names":["_withAsyncContext","_a"],"mappings":"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"}