{"file":"index.vue2.mjs","mappings":"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","names":["_withAsyncContext","_b","_a"],"sources":["../../../../../pages/study/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mx-auto px-4 py-8 md:py-12\">\r\n    <h2 class=\"text-3xl font-bold text-brown-dark dark:text-beige-light mb-6 md:mb-8 border-b-2 border-primary pb-3\">\r\n      الدورات الدراسية المنهجية\r\n    </h2>\r\n\r\n    <!-- 1. Loading State -->\r\n    <div v-if=\"pending\" class=\"text-center py-20\">\r\n      <LoadingSpinner class=\"w-12 h-12 mx-auto text-primary\" />\r\n      <p class=\"mt-4 text-base text-gray-600 dark:text-gray-400\">جارٍ تحميل الدورات المتاحة...</p>\r\n    </div>\r\n\r\n    <!-- 2. Error State -->\r\n     <div v-else-if=\"error\" class=\"text-center py-10 px-6 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700/50 rounded-lg max-w-lg mx-auto shadow-md\">\r\n         <div class=\"flex justify-center items-center text-red-600 dark:text-red-400 mb-4\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-7 h-7\" aria-hidden=\"true\">\r\n                <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 1 1-16 0 8 8 0 0 1 16 0Zm-8-5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-1.5 0v-4.5A.75.75 0 0 1 10 5Zm0 10a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\" clip-rule=\"evenodd\" />\r\n            </svg>\r\n            <h3 class=\"text-xl font-semibold ms-2\">خطأ في تحميل الدورات</h3>\r\n         </div>\r\n        <p class=\"text-sm text-red-700 dark:text-red-300 mb-5\">\r\n          {{ error.data?.message || error.message || 'حدث خطأ غير متوقع أثناء محاولة جلب قائمة الدورات. يرجى المحاولة مرة أخرى.' }}\r\n        </p>\r\n        <button @click=\"refresh\" class=\"button-secondary border-red-300 dark:border-red-600 text-red-700 dark:text-red-200 bg-red-100 dark:bg-red-800/60 hover:bg-red-200 dark:hover:bg-red-700/70 focus:ring-red-500 inline-flex items-center gap-1.5\">\r\n           <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-4 h-4\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M15.312 11.424a5.5 5.5 0 0 1-9.201 2.466l-.312-.311h2.433a.75.75 0 0 0 0-1.5H3.984a.75.75 0 0 0-.75.75v4.5a.75.75 0 0 0 1.5 0v-2.432l.311.31a7 7 0 0 0 11.767-3.18.75.75 0 1 0-1.475-.292ZM4.688 8.576a5.5 5.5 0 0 1 9.201-2.466l.312.311h-2.433a.75.75 0 0 0 0 1.5h4.516a.75.75 0 0 0 .75-.75v-4.5a.75.75 0 0 0-1.5 0v2.432l-.311-.31a7 7 0 0 0-11.767 3.18.75.75 0 0 0 1.475.292Z\" clip-rule=\"evenodd\" /></svg>\r\n          إعادة المحاولة\r\n        </button>\r\n     </div>\r\n\r\n    <!-- 3. No Courses Available State -->\r\n    <div v-else-if=\"Array.isArray(courses) && courses.length === 0\" class=\"text-center py-16 text-gray-500 dark:text-gray-400 border border-dashed dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-800/20\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-12 h-12 mx-auto mb-4 text-gray-400 dark:text-gray-500\" aria-hidden=\"true\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\r\n      </svg>\r\n      <p class=\"text-lg font-medium\">لا توجد دورات دراسية متاحة حاليًا.</p>\r\n      <p class=\"text-sm mt-1 text-gray-400 dark:text-gray-500\">سيتم إضافة دورات جديدة قريبًا بإذن الله، تابعنا للمزيد.</p>\r\n    </div>\r\n\r\n    <!-- 4. Courses Grid -->\r\n    <div v-else-if=\"Array.isArray(courses) && courses.length > 0\" class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 md:gap-8\">\r\n      <!-- Course Card Iteration -->\r\n      <CourseCard\r\n        v-for=\"course in courses\"\r\n        :key=\"course.id\"\r\n        :course=\"course\"\r\n        :lesson-count=\"course.lessons_count\"\r\n        :category-name=\"course.category_name\"\r\n        :is-enrolled=\"userEnrollments.includes(course.id)\"\r\n        :enroll-loading=\"enrollLoadingState[course.id] || false\"\r\n        @enroll=\"handleEnroll\"\r\n      />\r\n      <!-- TODO: Implement Pagination or Infinite Scroll for large number of courses -->\r\n    </div>\r\n\r\n     <!-- 5. Fallback for unexpected states -->\r\n     <div v-else-if=\"!pending && !error\">\r\n        <p class=\"text-center py-10 text-gray-400 dark:text-gray-500 italic\">حالة عرض الدورات غير معروفة.</p>\r\n     </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, watch, reactive } from 'vue';\r\nimport type { Database, Tables } from '~/types/database.types';\r\nimport { useSupabaseClient, useAsyncData, useHead, navigateTo } from '#imports';\r\nimport CourseCard from '~/components/CourseCard.vue';\r\nimport LoadingSpinner from '~/components/LoadingSpinner.vue';\r\nimport { useUserStore } from '~/stores/user';\r\nimport { storeToRefs } from 'pinia';\r\n// import { useToast } from 'vue-toastification'; // Optional: Import if using toast notifications\r\n\r\n// --- Define Types ---\r\n// Interface for course data after processing (includes lesson count and category name)\r\ninterface ProcessedCourse extends Tables<'study_courses'> {\r\n  lessons_count: number;\r\n  category_name: string | null;\r\n}\r\n// Type for raw course data fetched from Supabase\r\ntype FetchedCourse = Tables<'study_courses'> & {\r\n  // The 'lessons' property will hold the count based on the foreign key constraint name\r\n  lessons?: { count: number }[];\r\n  category?: Pick<Tables<'categories'>, 'name'> | null; // Embedded category\r\n};\r\n// Type for enrollment data (only need course_id)\r\ntype CourseEnrollmentInfo = Pick<Tables<'course_enrollments'>, 'course_id'>;\r\n\r\n// --- Composables ---\r\nconst supabase = useSupabaseClient<Database>();\r\nconst userStore = useUserStore();\r\nconst { profile, isLoggedIn } = storeToRefs(userStore); // Reactive refs for user state\r\n// const toast = useToast(); // Optional: Initialize toast\r\n\r\n// --- State ---\r\n// Holds the processed list of courses to display\r\nconst courses = ref<ProcessedCourse[]>([]);\r\n// Holds the IDs of courses the current user is enrolled in\r\nconst userEnrollments = ref<number[]>([]);\r\n// Tracks loading state for individual enrollment buttons (keyed by course ID)\r\nconst enrollLoadingState = reactive<Record<number, boolean>>({});\r\n\r\n// --- Data Fetching ---\r\n// Fetches active courses with lesson counts and category names, plus user's enrollments.\r\nconst { data, pending, error, refresh } = await useAsyncData(\r\n    'studyCoursesAndEnrollmentsList', // Unique key for this fetch operation\r\n    async () => {\r\n        const userId = profile.value?.id; // Get current user ID safely\r\n        console.log(`[useAsyncData] Fetching study data. User ID: ${userId ?? 'Guest'}`);\r\n\r\n        // Fetch courses and enrollments in parallel using Promise.allSettled for robust error handling\r\n        const results = await Promise.allSettled([\r\n            // Query 1: Fetch Active Courses with Lesson Count and Category Name\r\n            supabase\r\n                .from('study_courses')\r\n                .select(`\r\n                  *,\r\n                  lessons!fk_lessons_course_id(count),\r\n                  category:categories ( name )\r\n                `) // *** USE CONSTRAINT NAME 'fk_lessons_course_id' FOR LESSONS COUNT ***\r\n                .eq('is_active', true) // Only fetch active courses\r\n                .order('created_at', { ascending: false }), // Order courses, newest first\r\n\r\n            // Query 2: Fetch User Enrollments (only if logged in)\r\n            isLoggedIn.value && userId\r\n                ? supabase\r\n                    .from('course_enrollments')\r\n                    .select('course_id') // Only need the course ID for enrollment check\r\n                    .eq('user_id', userId)\r\n                : Promise.resolve({ data: [], error: null }) // Resolve with empty data if not logged in\r\n        ]);\r\n\r\n        // Process Course Results\r\n        let fetchedCoursesRaw: FetchedCourse[] = [];\r\n        if (results[0].status === 'fulfilled') {\r\n             const courseResult = results[0].value; // نتيجة جلب الدورات\r\n             if (courseResult.error) {\r\n                  const errorObj = courseResult.error; // كائن الخطأ\r\n\r\n                  // --- تسجيل تفصيلي للخطأ ---\r\n                  console.error('Supabase error fetching courses (START) -----------');\r\n                  console.error('Message:', errorObj.message);\r\n                  console.error('Code:', errorObj.code);\r\n                  console.error('Details:', errorObj.details);\r\n                  console.error('Hint:', errorObj.hint);\r\n                  console.error('Full error object for inspection:', JSON.stringify(errorObj, null, 2));\r\n                  console.error('Supabase error fetching courses (END) -------------');\r\n                  // --- نهاية التسجيل التفصيلي ---\r\n\r\n                  // Check for the specific embedding error message robustly\r\n                  if (String(errorObj.message).includes(\"more than one relationship\")) {\r\n                      throw new Error(`فشل جلب الدورات: ${errorObj.message || 'التباس في تعريف العلاقات'}. هناك التباس في تعريف العلاقات بين الجداول.`);\r\n                  } else {\r\n                     throw new Error(`فشل جلب الدورات: ${errorObj.message || 'خطأ غير معروف من Supabase.'}`);\r\n                  }\r\n             }\r\n             // إذا لم يكن هناك خطأ، أكمل بشكل طبيعي\r\n             fetchedCoursesRaw = courseResult.data || [];\r\n             console.log(`[useAsyncData] Raw courses fetched: ${fetchedCoursesRaw.length}`);\r\n        } else {\r\n            // Handle promise rejection for course fetch (status === 'rejected')\r\n            console.error('Failed promise fetching courses (Rejected):', results[0].reason);\r\n            console.error('Rejection reason details:', JSON.stringify(results[0].reason, null, 2));\r\n            throw new Error(`فشل الاتصال لجلب الدورات: ${results[0].reason?.message || 'سبب غير معروف.'}`);\r\n        }\r\n\r\n\r\n        // Process Enrollment Results\r\n        let fetchedEnrollmentsData: CourseEnrollmentInfo[] = [];\r\n        if (results[1].status === 'fulfilled') {\r\n             if (results[1].value.error) {\r\n                 console.warn('Supabase error fetching enrollments (continuing):', results[1].value.error.message);\r\n             } else {\r\n                fetchedEnrollmentsData = results[1].value.data || [];\r\n                console.log(`[useAsyncData] Enrollments fetched: ${fetchedEnrollmentsData.length}`);\r\n             }\r\n        } else {\r\n            console.warn('Failed promise fetching user enrollments (continuing):', results[1].reason);\r\n        }\r\n\r\n        // Transform raw course data into the structure needed by the template\r\n        const processedCourses: ProcessedCourse[] = fetchedCoursesRaw.map(course => ({\r\n            ...course,\r\n            // Safely access count from the 'lessons' relation (using the constraint name implicitly)\r\n            lessons_count: course.lessons?.[0]?.count ?? 0,\r\n            category_name: course.category?.name ?? null, // Safely access category name\r\n            lessons: undefined, // Remove temporary relation properties\r\n            category: undefined\r\n        }));\r\n\r\n        // Return the processed data\r\n        return {\r\n            courses: processedCourses,\r\n            enrollments: fetchedEnrollmentsData.map(e => e.course_id) // Return only the array of enrolled course IDs\r\n        };\r\n    }, {\r\n        // Default value while loading or on error, matches the return structure\r\n        default: () => ({ courses: [], enrollments: [] }),\r\n        // Refetch data if the user logs in or out\r\n        watch: [() => profile.value?.id],\r\n        // server: false, // Consider if SSR hydration mismatches occur with auth state\r\n    }\r\n);\r\n\r\n // --- Update Local State Reactively ---\r\n // Updates the component's local state when the fetched data changes.\r\n watch(data, (newData) => {\r\n    if (newData) {\r\n        courses.value = newData.courses || [];\r\n        userEnrollments.value = newData.enrollments || [];\r\n        console.log(\"[Watch] Local state updated. Courses:\", courses.value.length, \"Enrollments:\", userEnrollments.value.length);\r\n    } else if (!pending.value && !error.value) {\r\n        // Reset state if data becomes null unexpectedly after loading\r\n        console.warn(\"[Watch] useAsyncData returned null/undefined data unexpectedly.\");\r\n        courses.value = [];\r\n        userEnrollments.value = [];\r\n    }\r\n }, { immediate: true }); // Run immediately on component mount\r\n\r\n// --- Enrollment Action ---\r\n// Handles the @enroll event emitted by CourseCard\r\nasync function handleEnroll(courseId: number) {\r\n    if (!isLoggedIn.value || !profile.value?.id) {\r\n        // TODO: Replace alert with a user-friendly notification (e.g., toast)\r\n        alert('يجب تسجيل الدخول أولاً للانتساب للدورة.');\r\n        navigateTo(`/login?redirect=${window.location.pathname}`); // Redirect to login\r\n        return;\r\n    }\r\n\r\n    if (userEnrollments.value.includes(courseId)) {\r\n        // TODO: Replace alert with a user-friendly notification (e.g., toast)\r\n        alert('أنت منتسب بالفعل لهذه الدورة.');\r\n        navigateTo(`/study/courses/${courseId}`); // Navigate to course if already enrolled\r\n        return;\r\n    }\r\n\r\n    // Set loading state for the specific course button\r\n    enrollLoadingState[courseId] = true;\r\n    console.log(`[handleEnroll] Attempting enrollment for course ${courseId}...`);\r\n\r\n    try {\r\n        const { error: enrollError } = await supabase\r\n            .from('course_enrollments')\r\n            .insert({ user_id: profile.value.id, course_id: courseId })\r\n            .select('course_id')\r\n            .single();\r\n\r\n        if (enrollError) {\r\n             // Handle potential race condition or stale state where user is already enrolled in DB\r\n             if (enrollError.code === '23505') { // unique_violation\r\n                 console.warn(`Enrollment conflict for course ${courseId}. Syncing state.`);\r\n                 // TODO: Replace alert with a user-friendly notification (e.g., toast)\r\n                 alert('أنت منتسب بالفعل لهذه الدورة (تم تحديث الحالة).');\r\n                 if (!userEnrollments.value.includes(courseId)) {\r\n                     userEnrollments.value.push(courseId); // Sync local state\r\n                 }\r\n             } else {\r\n                throw enrollError; // Re-throw other Supabase errors\r\n             }\r\n        } else {\r\n            // Success\r\n            console.log(`[handleEnroll] Enrollment successful for course ${courseId}.`);\r\n            userEnrollments.value.push(courseId); // Update local state immediately\r\n            // TODO: Replace alert with a success notification (e.g., toast)\r\n            alert('تم الانتساب للدورة بنجاح!');\r\n            navigateTo(`/study/courses/${courseId}`); // Navigate to the course page\r\n        }\r\n    } catch (err: any) {\r\n        console.error(`[handleEnroll] Error enrolling in course ${courseId}:`, err);\r\n        // TODO: Replace alert with an error notification (e.g., toast)\r\n        alert(`فشل الانتساب للدورة: ${err.message || 'حدث خطأ غير متوقع.'}`);\r\n    } finally {\r\n        // Always reset loading state for the specific button\r\n        enrollLoadingState[courseId] = false;\r\n    }\r\n}\r\n\r\n// --- SEO Meta Tags ---\r\nuseHead({\r\n  title: 'الدورات الدراسية - موقع الشيخ إبراهيم بشندي',\r\n  meta: [\r\n    { name: 'description', content: 'تصفح والتحق بالدورات الدراسية المنهجية للشيخ إبراهيم بشندي في مختلف العلوم الشرعية.' },\r\n    { property: 'og:title', content: 'الدورات الدراسية - موقع الشيخ إبراهيم بشندي' },\r\n    { property: 'og:description', content: 'دورات علمية منهجية ومتخصصة في العلوم الشرعية، متاحة للتعلم والدراسة عبر الإنترنت.' },\r\n    { property: 'og:type', content: 'website' },\r\n    // { property: 'og:image', content: '/path/to/default-course-image.jpg' }, // Consider adding a default image\r\n  ]\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n/* Basic button styles (can be extracted to a global CSS or base component) */\r\n.button-base {\r\n    @apply inline-flex items-center justify-center px-4 py-2 border text-sm font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-60 disabled:cursor-not-allowed transition-colors duration-150;\r\n}\r\n.button-primary {\r\n    @apply button-base border-transparent text-white bg-primary hover:bg-opacity-85 focus:ring-primary;\r\n}\r\n.button-secondary {\r\n    @apply button-base border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:ring-blue-muted;\r\n}\r\n\r\n/* Ensure focus states are clearly visible */\r\nbutton:focus-visible, a:focus-visible {\r\n  outline: 2px solid var(--color-primary); /* Or your focus ring color */\r\n  outline-offset: 2px;\r\n}\r\n\r\n/* Add transitions for smoother visual feedback */\r\n.grid > * {\r\n    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\r\n}\r\n/* Example hover effect (could be inside CourseCard) */\r\n.grid > *:hover {\r\n    /* transform: translateY(-2px); */\r\n    /* box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow); */\r\n}\r\n</style>"],"version":3}